
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Tue Jun 17 09:23:10 2025 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/lpt-10xe/tools/Suite/new_arch_test/riscv-arch-test/coverage/dataset.cgf \
//                  --cgf /home/lpt-10xe/tools/Suite/new_arch_test/riscv-arch-test/coverage/i/rv32i.cgf \
 \
//                  -- xlen 32  \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the ori instruction of the RISC-V RV32 extension for the ori covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32I")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",ori)

RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rd, rs1==x31, rd==x31, rs1_val==46341 and imm_val==46, rs1_val != imm_val, rs1_val > 0 and imm_val > 0
// opcode: ori ; op1:x31; dest:x31; op1val:0xb505;  immval:0x2e
TEST_IMM_OP( ori, x31, x31, 0xb52f, 0xb505, 0x2e, x1, 0*XLEN/8, x2)

inst_1:
// rs1 != rd, rs1==x29, rd==x30, rs1_val==46341 and imm_val==-44, rs1_val > 0 and imm_val < 0
// opcode: ori ; op1:x29; dest:x30; op1val:0xb505;  immval:-0x2c
TEST_IMM_OP( ori, x30, x29, 0xffffffd5, 0xb505, -0x2c, x1, 1*XLEN/8, x2)

inst_2:
// rs1==x30, rd==x29, rs1_val==46341 and imm_val==1639, 
// opcode: ori ; op1:x30; dest:x29; op1val:0xb505;  immval:0x667
TEST_IMM_OP( ori, x29, x30, 0xb767, 0xb505, 0x667, x1, 2*XLEN/8, x2)

inst_3:
// rs1==x27, rd==x28, rs1_val==46341 and imm_val==820, 
// opcode: ori ; op1:x27; dest:x28; op1val:0xb505;  immval:0x334
TEST_IMM_OP( ori, x28, x27, 0xb735, 0xb505, 0x334, x1, 3*XLEN/8, x2)

inst_4:
// rs1==x28, rd==x27, rs1_val==46341 and imm_val==6, 
// opcode: ori ; op1:x28; dest:x27; op1val:0xb505;  immval:0x6
TEST_IMM_OP( ori, x27, x28, 0xb507, 0xb505, 0x6, x1, 4*XLEN/8, x2)

inst_5:
// rs1==x25, rd==x26, rs1_val==46341 and imm_val==-1365, 
// opcode: ori ; op1:x25; dest:x26; op1val:0xb505;  immval:-0x555
TEST_IMM_OP( ori, x26, x25, 0xffffffaf, 0xb505, -0x555, x1, 5*XLEN/8, x2)

inst_6:
// rs1==x26, rd==x25, rs1_val==46341 and imm_val==1366, 
// opcode: ori ; op1:x26; dest:x25; op1val:0xb505;  immval:0x556
TEST_IMM_OP( ori, x25, x26, 0xb557, 0xb505, 0x556, x1, 6*XLEN/8, x2)

inst_7:
// rs1==x23, rd==x24, rs1_val==46341 and imm_val==44, 
// opcode: ori ; op1:x23; dest:x24; op1val:0xb505;  immval:0x2c
TEST_IMM_OP( ori, x24, x23, 0xb52d, 0xb505, 0x2c, x1, 7*XLEN/8, x2)

inst_8:
// rs1==x24, rd==x23, rs1_val==46341 and imm_val==1637, 
// opcode: ori ; op1:x24; dest:x23; op1val:0xb505;  immval:0x665
TEST_IMM_OP( ori, x23, x24, 0xb765, 0xb505, 0x665, x1, 8*XLEN/8, x2)

inst_9:
// rs1==x21, rd==x22, rs1_val==46341 and imm_val==818, 
// opcode: ori ; op1:x21; dest:x22; op1val:0xb505;  immval:0x332
TEST_IMM_OP( ori, x22, x21, 0xb737, 0xb505, 0x332, x1, 9*XLEN/8, x2)

inst_10:
// rs1==x22, rd==x21, rs1_val==46341 and imm_val==4, 
// opcode: ori ; op1:x22; dest:x21; op1val:0xb505;  immval:0x4
TEST_IMM_OP( ori, x21, x22, 0xb505, 0xb505, 0x4, x1, 10*XLEN/8, x2)

inst_11:
// rs1==x19, rd==x20, rs1_val==46341 and imm_val==0, imm_val == 0
// opcode: ori ; op1:x19; dest:x20; op1val:0xb505;  immval:0x0
TEST_IMM_OP( ori, x20, x19, 0xb505, 0xb505, 0x0, x1, 11*XLEN/8, x2)

inst_12:
// rs1==x20, rd==x19, rs1_val==46341 and imm_val==1364, 
// opcode: ori ; op1:x20; dest:x19; op1val:0xb505;  immval:0x554
TEST_IMM_OP( ori, x19, x20, 0xb555, 0xb505, 0x554, x1, 12*XLEN/8, x2)

inst_13:
// rs1==x17, rd==x18, rs1_val==46341 and imm_val==2, 
// opcode: ori ; op1:x17; dest:x18; op1val:0xb505;  immval:0x2
TEST_IMM_OP( ori, x18, x17, 0xb507, 0xb505, 0x2, x1, 13*XLEN/8, x2)

inst_14:
// rs1==x18, rd==x17, rs1_val==46341 and imm_val==45, 
// opcode: ori ; op1:x18; dest:x17; op1val:0xb505;  immval:0x2d
TEST_IMM_OP( ori, x17, x18, 0xb52d, 0xb505, 0x2d, x1, 14*XLEN/8, x2)

inst_15:
// rs1==x15, rd==x16, rs1_val==46341 and imm_val==-45, 
// opcode: ori ; op1:x15; dest:x16; op1val:0xb505;  immval:-0x2d
TEST_IMM_OP( ori, x16, x15, 0xffffffd7, 0xb505, -0x2d, x1, 15*XLEN/8, x2)

inst_16:
// rs1==x16, rd==x15, rs1_val==46341 and imm_val==1638, 
// opcode: ori ; op1:x16; dest:x15; op1val:0xb505;  immval:0x666
TEST_IMM_OP( ori, x15, x16, 0xb767, 0xb505, 0x666, x1, 16*XLEN/8, x2)

inst_17:
// rs1==x13, rd==x14, rs1_val==46341 and imm_val==819, 
// opcode: ori ; op1:x13; dest:x14; op1val:0xb505;  immval:0x333
TEST_IMM_OP( ori, x14, x13, 0xb737, 0xb505, 0x333, x1, 17*XLEN/8, x2)

inst_18:
// rs1==x14, rd==x13, rs1_val==46341 and imm_val==5, 
// opcode: ori ; op1:x14; dest:x13; op1val:0xb505;  immval:0x5
TEST_IMM_OP( ori, x13, x14, 0xb505, 0xb505, 0x5, x1, 18*XLEN/8, x2)

inst_19:
// rs1==x11, rd==x12, rs1_val==46341 and imm_val==-1366, 
// opcode: ori ; op1:x11; dest:x12; op1val:0xb505;  immval:-0x556
TEST_IMM_OP( ori, x12, x11, 0xffffffaf, 0xb505, -0x556, x1, 19*XLEN/8, x2)

inst_20:
// rs1==x12, rd==x11, rs1_val==46341 and imm_val==1365, 
// opcode: ori ; op1:x12; dest:x11; op1val:0xb505;  immval:0x555
TEST_IMM_OP( ori, x11, x12, 0xb555, 0xb505, 0x555, x1, 20*XLEN/8, x2)

inst_21:
// rs1==x9, rd==x10, rs1_val==46341 and imm_val==3, 
// opcode: ori ; op1:x9; dest:x10; op1val:0xb505;  immval:0x3
TEST_IMM_OP( ori, x10, x9, 0xb507, 0xb505, 0x3, x1, 21*XLEN/8, x2)

inst_22:
// rs1==x10, rd==x9, rs1_val==-46339 and imm_val==46, rs1_val < 0 and imm_val > 0
// opcode: ori ; op1:x10; dest:x9; op1val:-0xb503;  immval:0x2e
TEST_IMM_OP( ori, x9, x10, 0xffff4aff, -0xb503, 0x2e, x1, 22*XLEN/8, x2)

inst_23:
// rs1==x7, rd==x8, rs1_val==-46339 and imm_val==-44, rs1_val < 0 and imm_val < 0
// opcode: ori ; op1:x7; dest:x8; op1val:-0xb503;  immval:-0x2c
TEST_IMM_OP( ori, x8, x7, 0xfffffffd, -0xb503, -0x2c, x1, 23*XLEN/8, x2)

inst_24:
// rs1==x8, rd==x7, rs1_val==-46339 and imm_val==1639, 
// opcode: ori ; op1:x8; dest:x7; op1val:-0xb503;  immval:0x667
TEST_IMM_OP( ori, x7, x8, 0xffff4eff, -0xb503, 0x667, x1, 24*XLEN/8, x2)

inst_25:
// rs1==x5, rd==x6, rs1_val==-46339 and imm_val==820, 
// opcode: ori ; op1:x5; dest:x6; op1val:-0xb503;  immval:0x334
TEST_IMM_OP( ori, x6, x5, 0xffff4bfd, -0xb503, 0x334, x1, 25*XLEN/8, x2)
RVTEST_SIGBASE(x7,signature_x7_0)

inst_26:
// rs1==x6, rd==x5, rs1_val==-46339 and imm_val==6, 
// opcode: ori ; op1:x6; dest:x5; op1val:-0xb503;  immval:0x6
TEST_IMM_OP( ori, x5, x6, 0xffff4aff, -0xb503, 0x6, x7, 0*XLEN/8, x8)

inst_27:
// rs1==x3, rd==x4, rs1_val==-46339 and imm_val==-1365, 
// opcode: ori ; op1:x3; dest:x4; op1val:-0xb503;  immval:-0x555
TEST_IMM_OP( ori, x4, x3, 0xfffffaff, -0xb503, -0x555, x7, 1*XLEN/8, x8)

inst_28:
// rs1==x4, rd==x3, rs1_val==-46339 and imm_val==1366, 
// opcode: ori ; op1:x4; dest:x3; op1val:-0xb503;  immval:0x556
TEST_IMM_OP( ori, x3, x4, 0xffff4fff, -0xb503, 0x556, x7, 2*XLEN/8, x8)

inst_29:
// rs1==x1, rd==x2, rs1_val==-46339 and imm_val==44, 
// opcode: ori ; op1:x1; dest:x2; op1val:-0xb503;  immval:0x2c
TEST_IMM_OP( ori, x2, x1, 0xffff4afd, -0xb503, 0x2c, x7, 3*XLEN/8, x8)

inst_30:
// rs1==x2, rd==x1, rs1_val==-46339 and imm_val==1637, 
// opcode: ori ; op1:x2; dest:x1; op1val:-0xb503;  immval:0x665
TEST_IMM_OP( ori, x1, x2, 0xffff4efd, -0xb503, 0x665, x7, 4*XLEN/8, x8)

inst_31:
// rs1==x0, rs1_val==-46339 and imm_val==818, 
// opcode: ori ; op1:x0; dest:x31; op1val:0x0;  immval:0x332
TEST_IMM_OP( ori, x31, x0, 0x332, 0x0, 0x332, x7, 5*XLEN/8, x8)

inst_32:
// rs1_val==-46339 and imm_val==4, 
// opcode: ori ; op1:x30; dest:x31; op1val:-0xb503;  immval:0x4
TEST_IMM_OP( ori, x31, x30, 0xffff4afd, -0xb503, 0x4, x7, 6*XLEN/8, x8)

inst_33:
// rs1_val==-46339 and imm_val==0, 
// opcode: ori ; op1:x30; dest:x31; op1val:-0xb503;  immval:0x0
TEST_IMM_OP( ori, x31, x30, 0xffff4afd, -0xb503, 0x0, x7, 7*XLEN/8, x8)

inst_34:
// rs1_val==-46339 and imm_val==1364, 
// opcode: ori ; op1:x30; dest:x31; op1val:-0xb503;  immval:0x554
TEST_IMM_OP( ori, x31, x30, 0xffff4ffd, -0xb503, 0x554, x7, 8*XLEN/8, x8)

inst_35:
// rs1_val==-46339 and imm_val==2, 
// opcode: ori ; op1:x30; dest:x31; op1val:-0xb503;  immval:0x2
TEST_IMM_OP( ori, x31, x30, 0xffff4aff, -0xb503, 0x2, x7, 9*XLEN/8, x8)

inst_36:
// rs1_val==-46339 and imm_val==45, 
// opcode: ori ; op1:x30; dest:x31; op1val:-0xb503;  immval:0x2d
TEST_IMM_OP( ori, x31, x30, 0xffff4afd, -0xb503, 0x2d, x7, 10*XLEN/8, x8)

inst_37:
// rs1_val==-46339 and imm_val==-45, 
// opcode: ori ; op1:x30; dest:x31; op1val:-0xb503;  immval:-0x2d
TEST_IMM_OP( ori, x31, x30, 0xffffffff, -0xb503, -0x2d, x7, 11*XLEN/8, x8)

inst_38:
// rs1_val==-46339 and imm_val==1638, 
// opcode: ori ; op1:x30; dest:x31; op1val:-0xb503;  immval:0x666
TEST_IMM_OP( ori, x31, x30, 0xffff4eff, -0xb503, 0x666, x7, 12*XLEN/8, x8)

inst_39:
// rs1_val==-46339 and imm_val==819, 
// opcode: ori ; op1:x30; dest:x31; op1val:-0xb503;  immval:0x333
TEST_IMM_OP( ori, x31, x30, 0xffff4bff, -0xb503, 0x333, x7, 13*XLEN/8, x8)

inst_40:
// rs1_val==-46339 and imm_val==5, 
// opcode: ori ; op1:x30; dest:x31; op1val:-0xb503;  immval:0x5
TEST_IMM_OP( ori, x31, x30, 0xffff4afd, -0xb503, 0x5, x7, 14*XLEN/8, x8)

inst_41:
// rs1_val==-46339 and imm_val==-1366, 
// opcode: ori ; op1:x30; dest:x31; op1val:-0xb503;  immval:-0x556
TEST_IMM_OP( ori, x31, x30, 0xfffffaff, -0xb503, -0x556, x7, 15*XLEN/8, x8)

inst_42:
// rs1_val==-46339 and imm_val==1365, 
// opcode: ori ; op1:x30; dest:x31; op1val:-0xb503;  immval:0x555
TEST_IMM_OP( ori, x31, x30, 0xffff4ffd, -0xb503, 0x555, x7, 16*XLEN/8, x8)

inst_43:
// rs1_val==-46339 and imm_val==3, 
// opcode: ori ; op1:x30; dest:x31; op1val:-0xb503;  immval:0x3
TEST_IMM_OP( ori, x31, x30, 0xffff4aff, -0xb503, 0x3, x7, 17*XLEN/8, x8)

inst_44:
// rs1_val==1717986919 and imm_val==46, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x66666667;  immval:0x2e
TEST_IMM_OP( ori, x31, x30, 0x6666666f, 0x66666667, 0x2e, x7, 18*XLEN/8, x8)

inst_45:
// rs1_val==1717986919 and imm_val==-44, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x66666667;  immval:-0x2c
TEST_IMM_OP( ori, x31, x30, 0xfffffff7, 0x66666667, -0x2c, x7, 19*XLEN/8, x8)

inst_46:
// rs1_val==1717986919 and imm_val==1639, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x66666667;  immval:0x667
TEST_IMM_OP( ori, x31, x30, 0x66666667, 0x66666667, 0x667, x7, 20*XLEN/8, x8)

inst_47:
// rs1_val==1717986919 and imm_val==820, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x66666667;  immval:0x334
TEST_IMM_OP( ori, x31, x30, 0x66666777, 0x66666667, 0x334, x7, 21*XLEN/8, x8)

inst_48:
// rs1_val==1717986919 and imm_val==6, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x66666667;  immval:0x6
TEST_IMM_OP( ori, x31, x30, 0x66666667, 0x66666667, 0x6, x7, 22*XLEN/8, x8)

inst_49:
// rs1_val==1717986919 and imm_val==-1365, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x66666667;  immval:-0x555
TEST_IMM_OP( ori, x31, x30, 0xfffffeef, 0x66666667, -0x555, x7, 23*XLEN/8, x8)

inst_50:
// rs1_val==1717986919 and imm_val==1366, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x66666667;  immval:0x556
TEST_IMM_OP( ori, x31, x30, 0x66666777, 0x66666667, 0x556, x7, 24*XLEN/8, x8)

inst_51:
// rs1_val==1717986919 and imm_val==44, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x66666667;  immval:0x2c
TEST_IMM_OP( ori, x31, x30, 0x6666666f, 0x66666667, 0x2c, x7, 25*XLEN/8, x8)

inst_52:
// rs1_val==1717986919 and imm_val==1637, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x66666667;  immval:0x665
TEST_IMM_OP( ori, x31, x30, 0x66666667, 0x66666667, 0x665, x7, 26*XLEN/8, x8)

inst_53:
// rs1_val==1717986919 and imm_val==818, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x66666667;  immval:0x332
TEST_IMM_OP( ori, x31, x30, 0x66666777, 0x66666667, 0x332, x7, 27*XLEN/8, x8)

inst_54:
// rs1_val==1717986919 and imm_val==4, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x66666667;  immval:0x4
TEST_IMM_OP( ori, x31, x30, 0x66666667, 0x66666667, 0x4, x7, 28*XLEN/8, x8)

inst_55:
// rs1_val==1717986919 and imm_val==0, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x66666667;  immval:0x0
TEST_IMM_OP( ori, x31, x30, 0x66666667, 0x66666667, 0x0, x7, 29*XLEN/8, x8)

inst_56:
// rs1_val==1717986919 and imm_val==1364, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x66666667;  immval:0x554
TEST_IMM_OP( ori, x31, x30, 0x66666777, 0x66666667, 0x554, x7, 30*XLEN/8, x8)

inst_57:
// rs1_val==1717986919 and imm_val==2, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x66666667;  immval:0x2
TEST_IMM_OP( ori, x31, x30, 0x66666667, 0x66666667, 0x2, x7, 31*XLEN/8, x8)

inst_58:
// rs1_val==1717986919 and imm_val==45, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x66666667;  immval:0x2d
TEST_IMM_OP( ori, x31, x30, 0x6666666f, 0x66666667, 0x2d, x7, 32*XLEN/8, x8)

inst_59:
// rs1_val==1717986919 and imm_val==-45, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x66666667;  immval:-0x2d
TEST_IMM_OP( ori, x31, x30, 0xfffffff7, 0x66666667, -0x2d, x7, 33*XLEN/8, x8)

inst_60:
// rs1_val==1717986919 and imm_val==1638, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x66666667;  immval:0x666
TEST_IMM_OP( ori, x31, x30, 0x66666667, 0x66666667, 0x666, x7, 34*XLEN/8, x8)

inst_61:
// rs1_val==1717986919 and imm_val==819, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x66666667;  immval:0x333
TEST_IMM_OP( ori, x31, x30, 0x66666777, 0x66666667, 0x333, x7, 35*XLEN/8, x8)

inst_62:
// rs1_val==1717986919 and imm_val==5, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x66666667;  immval:0x5
TEST_IMM_OP( ori, x31, x30, 0x66666667, 0x66666667, 0x5, x7, 36*XLEN/8, x8)

inst_63:
// rs1_val==1717986919 and imm_val==-1366, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x66666667;  immval:-0x556
TEST_IMM_OP( ori, x31, x30, 0xfffffeef, 0x66666667, -0x556, x7, 37*XLEN/8, x8)

inst_64:
// rs1_val==1717986919 and imm_val==1365, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x66666667;  immval:0x555
TEST_IMM_OP( ori, x31, x30, 0x66666777, 0x66666667, 0x555, x7, 38*XLEN/8, x8)

inst_65:
// rs1_val==1717986919 and imm_val==3, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x66666667;  immval:0x3
TEST_IMM_OP( ori, x31, x30, 0x66666667, 0x66666667, 0x3, x7, 39*XLEN/8, x8)

inst_66:
// rs1_val==858993460 and imm_val==46, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x33333334;  immval:0x2e
TEST_IMM_OP( ori, x31, x30, 0x3333333e, 0x33333334, 0x2e, x7, 40*XLEN/8, x8)

inst_67:
// rs1_val==858993460 and imm_val==-44, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x33333334;  immval:-0x2c
TEST_IMM_OP( ori, x31, x30, 0xfffffff4, 0x33333334, -0x2c, x7, 41*XLEN/8, x8)

inst_68:
// rs1_val==858993460 and imm_val==1639, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x33333334;  immval:0x667
TEST_IMM_OP( ori, x31, x30, 0x33333777, 0x33333334, 0x667, x7, 42*XLEN/8, x8)

inst_69:
// rs1_val==858993460 and imm_val==820, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x33333334;  immval:0x334
TEST_IMM_OP( ori, x31, x30, 0x33333334, 0x33333334, 0x334, x7, 43*XLEN/8, x8)

inst_70:
// rs1_val==858993460 and imm_val==6, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x33333334;  immval:0x6
TEST_IMM_OP( ori, x31, x30, 0x33333336, 0x33333334, 0x6, x7, 44*XLEN/8, x8)

inst_71:
// rs1_val==858993460 and imm_val==-1365, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x33333334;  immval:-0x555
TEST_IMM_OP( ori, x31, x30, 0xfffffbbf, 0x33333334, -0x555, x7, 45*XLEN/8, x8)

inst_72:
// rs1_val==858993460 and imm_val==1366, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x33333334;  immval:0x556
TEST_IMM_OP( ori, x31, x30, 0x33333776, 0x33333334, 0x556, x7, 46*XLEN/8, x8)

inst_73:
// rs1_val==858993460 and imm_val==44, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x33333334;  immval:0x2c
TEST_IMM_OP( ori, x31, x30, 0x3333333c, 0x33333334, 0x2c, x7, 47*XLEN/8, x8)

inst_74:
// rs1_val==858993460 and imm_val==1637, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x33333334;  immval:0x665
TEST_IMM_OP( ori, x31, x30, 0x33333775, 0x33333334, 0x665, x7, 48*XLEN/8, x8)

inst_75:
// rs1_val==858993460 and imm_val==818, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x33333334;  immval:0x332
TEST_IMM_OP( ori, x31, x30, 0x33333336, 0x33333334, 0x332, x7, 49*XLEN/8, x8)

inst_76:
// rs1_val==858993460 and imm_val==4, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x33333334;  immval:0x4
TEST_IMM_OP( ori, x31, x30, 0x33333334, 0x33333334, 0x4, x7, 50*XLEN/8, x8)

inst_77:
// rs1_val==858993460 and imm_val==0, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x33333334;  immval:0x0
TEST_IMM_OP( ori, x31, x30, 0x33333334, 0x33333334, 0x0, x7, 51*XLEN/8, x8)

inst_78:
// rs1_val==858993460 and imm_val==1364, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x33333334;  immval:0x554
TEST_IMM_OP( ori, x31, x30, 0x33333774, 0x33333334, 0x554, x7, 52*XLEN/8, x8)

inst_79:
// rs1_val==858993460 and imm_val==2, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x33333334;  immval:0x2
TEST_IMM_OP( ori, x31, x30, 0x33333336, 0x33333334, 0x2, x7, 53*XLEN/8, x8)

inst_80:
// rs1_val==858993460 and imm_val==45, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x33333334;  immval:0x2d
TEST_IMM_OP( ori, x31, x30, 0x3333333d, 0x33333334, 0x2d, x7, 54*XLEN/8, x8)

inst_81:
// rs1_val==858993460 and imm_val==-45, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x33333334;  immval:-0x2d
TEST_IMM_OP( ori, x31, x30, 0xfffffff7, 0x33333334, -0x2d, x7, 55*XLEN/8, x8)

inst_82:
// rs1_val==858993460 and imm_val==1638, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x33333334;  immval:0x666
TEST_IMM_OP( ori, x31, x30, 0x33333776, 0x33333334, 0x666, x7, 56*XLEN/8, x8)

inst_83:
// rs1_val==858993460 and imm_val==819, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x33333334;  immval:0x333
TEST_IMM_OP( ori, x31, x30, 0x33333337, 0x33333334, 0x333, x7, 57*XLEN/8, x8)

inst_84:
// rs1_val==858993460 and imm_val==5, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x33333334;  immval:0x5
TEST_IMM_OP( ori, x31, x30, 0x33333335, 0x33333334, 0x5, x7, 58*XLEN/8, x8)

inst_85:
// rs1_val==858993460 and imm_val==-1366, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x33333334;  immval:-0x556
TEST_IMM_OP( ori, x31, x30, 0xfffffbbe, 0x33333334, -0x556, x7, 59*XLEN/8, x8)

inst_86:
// rs1_val==858993460 and imm_val==1365, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x33333334;  immval:0x555
TEST_IMM_OP( ori, x31, x30, 0x33333775, 0x33333334, 0x555, x7, 60*XLEN/8, x8)

inst_87:
// rs1_val==858993460 and imm_val==3, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x33333334;  immval:0x3
TEST_IMM_OP( ori, x31, x30, 0x33333337, 0x33333334, 0x3, x7, 61*XLEN/8, x8)

inst_88:
// rs1_val==6 and imm_val==46, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x6;  immval:0x2e
TEST_IMM_OP( ori, x31, x30, 0x2e, 0x6, 0x2e, x7, 62*XLEN/8, x8)

inst_89:
// rs1_val==6 and imm_val==-44, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x6;  immval:-0x2c
TEST_IMM_OP( ori, x31, x30, 0xffffffd6, 0x6, -0x2c, x7, 63*XLEN/8, x8)

inst_90:
// rs1_val==6 and imm_val==1639, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x6;  immval:0x667
TEST_IMM_OP( ori, x31, x30, 0x667, 0x6, 0x667, x7, 64*XLEN/8, x8)

inst_91:
// rs1_val==6 and imm_val==820, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x6;  immval:0x334
TEST_IMM_OP( ori, x31, x30, 0x336, 0x6, 0x334, x7, 65*XLEN/8, x8)

inst_92:
// rs1_val==6 and imm_val==6, rs1_val == imm_val
// opcode: ori ; op1:x30; dest:x31; op1val:0x6;  immval:0x6
TEST_IMM_OP( ori, x31, x30, 0x6, 0x6, 0x6, x7, 66*XLEN/8, x8)

inst_93:
// rs1_val==6 and imm_val==-1365, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x6;  immval:-0x555
TEST_IMM_OP( ori, x31, x30, 0xfffffaaf, 0x6, -0x555, x7, 67*XLEN/8, x8)

inst_94:
// rs1_val==6 and imm_val==1366, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x6;  immval:0x556
TEST_IMM_OP( ori, x31, x30, 0x556, 0x6, 0x556, x7, 68*XLEN/8, x8)

inst_95:
// rs1_val==6 and imm_val==44, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x6;  immval:0x2c
TEST_IMM_OP( ori, x31, x30, 0x2e, 0x6, 0x2c, x7, 69*XLEN/8, x8)

inst_96:
// rs1_val==6 and imm_val==1637, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x6;  immval:0x665
TEST_IMM_OP( ori, x31, x30, 0x667, 0x6, 0x665, x7, 70*XLEN/8, x8)

inst_97:
// rs1_val==6 and imm_val==818, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x6;  immval:0x332
TEST_IMM_OP( ori, x31, x30, 0x336, 0x6, 0x332, x7, 71*XLEN/8, x8)

inst_98:
// rs1_val==6 and imm_val==4, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x6;  immval:0x4
TEST_IMM_OP( ori, x31, x30, 0x6, 0x6, 0x4, x7, 72*XLEN/8, x8)

inst_99:
// rs1_val==6 and imm_val==0, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x6;  immval:0x0
TEST_IMM_OP( ori, x31, x30, 0x6, 0x6, 0x0, x7, 73*XLEN/8, x8)

inst_100:
// rs1_val==6 and imm_val==1364, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x6;  immval:0x554
TEST_IMM_OP( ori, x31, x30, 0x556, 0x6, 0x554, x7, 74*XLEN/8, x8)

inst_101:
// rs1_val==6 and imm_val==2, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x6;  immval:0x2
TEST_IMM_OP( ori, x31, x30, 0x6, 0x6, 0x2, x7, 75*XLEN/8, x8)

inst_102:
// rs1_val==6 and imm_val==45, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x6;  immval:0x2d
TEST_IMM_OP( ori, x31, x30, 0x2f, 0x6, 0x2d, x7, 76*XLEN/8, x8)

inst_103:
// rs1_val==6 and imm_val==-45, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x6;  immval:-0x2d
TEST_IMM_OP( ori, x31, x30, 0xffffffd7, 0x6, -0x2d, x7, 77*XLEN/8, x8)

inst_104:
// rs1_val==6 and imm_val==1638, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x6;  immval:0x666
TEST_IMM_OP( ori, x31, x30, 0x666, 0x6, 0x666, x7, 78*XLEN/8, x8)

inst_105:
// rs1_val==6 and imm_val==819, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x6;  immval:0x333
TEST_IMM_OP( ori, x31, x30, 0x337, 0x6, 0x333, x7, 79*XLEN/8, x8)

inst_106:
// rs1_val==6 and imm_val==5, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x6;  immval:0x5
TEST_IMM_OP( ori, x31, x30, 0x7, 0x6, 0x5, x7, 80*XLEN/8, x8)

inst_107:
// rs1_val==6 and imm_val==-1366, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x6;  immval:-0x556
TEST_IMM_OP( ori, x31, x30, 0xfffffaae, 0x6, -0x556, x7, 81*XLEN/8, x8)

inst_108:
// rs1_val==6 and imm_val==1365, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x6;  immval:0x555
TEST_IMM_OP( ori, x31, x30, 0x557, 0x6, 0x555, x7, 82*XLEN/8, x8)

inst_109:
// rs1_val==6 and imm_val==3, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x6;  immval:0x3
TEST_IMM_OP( ori, x31, x30, 0x7, 0x6, 0x3, x7, 83*XLEN/8, x8)

inst_110:
// rs1_val==-1431655765 and imm_val==46, 
// opcode: ori ; op1:x30; dest:x31; op1val:-0x55555555;  immval:0x2e
TEST_IMM_OP( ori, x31, x30, 0xaaaaaaaf, -0x55555555, 0x2e, x7, 84*XLEN/8, x8)

inst_111:
// rs1_val==-1431655765 and imm_val==-44, 
// opcode: ori ; op1:x30; dest:x31; op1val:-0x55555555;  immval:-0x2c
TEST_IMM_OP( ori, x31, x30, 0xffffffff, -0x55555555, -0x2c, x7, 85*XLEN/8, x8)

inst_112:
// rs1_val==-1431655765 and imm_val==1639, 
// opcode: ori ; op1:x30; dest:x31; op1val:-0x55555555;  immval:0x667
TEST_IMM_OP( ori, x31, x30, 0xaaaaaeef, -0x55555555, 0x667, x7, 86*XLEN/8, x8)

inst_113:
// rs1_val==-1431655765 and imm_val==820, 
// opcode: ori ; op1:x30; dest:x31; op1val:-0x55555555;  immval:0x334
TEST_IMM_OP( ori, x31, x30, 0xaaaaabbf, -0x55555555, 0x334, x7, 87*XLEN/8, x8)

inst_114:
// rs1_val==-1431655765 and imm_val==6, 
// opcode: ori ; op1:x30; dest:x31; op1val:-0x55555555;  immval:0x6
TEST_IMM_OP( ori, x31, x30, 0xaaaaaaaf, -0x55555555, 0x6, x7, 88*XLEN/8, x8)

inst_115:
// rs1_val==-1431655765 and imm_val==-1365, 
// opcode: ori ; op1:x30; dest:x31; op1val:-0x55555555;  immval:-0x555
TEST_IMM_OP( ori, x31, x30, 0xfffffaab, -0x55555555, -0x555, x7, 89*XLEN/8, x8)

inst_116:
// rs1_val==-1431655765 and imm_val==1366, 
// opcode: ori ; op1:x30; dest:x31; op1val:-0x55555555;  immval:0x556
TEST_IMM_OP( ori, x31, x30, 0xaaaaafff, -0x55555555, 0x556, x7, 90*XLEN/8, x8)

inst_117:
// rs1_val==-1431655765 and imm_val==44, 
// opcode: ori ; op1:x30; dest:x31; op1val:-0x55555555;  immval:0x2c
TEST_IMM_OP( ori, x31, x30, 0xaaaaaaaf, -0x55555555, 0x2c, x7, 91*XLEN/8, x8)

inst_118:
// rs1_val==-1431655765 and imm_val==1637, 
// opcode: ori ; op1:x30; dest:x31; op1val:-0x55555555;  immval:0x665
TEST_IMM_OP( ori, x31, x30, 0xaaaaaeef, -0x55555555, 0x665, x7, 92*XLEN/8, x8)

inst_119:
// rs1_val==-1431655765 and imm_val==818, 
// opcode: ori ; op1:x30; dest:x31; op1val:-0x55555555;  immval:0x332
TEST_IMM_OP( ori, x31, x30, 0xaaaaabbb, -0x55555555, 0x332, x7, 93*XLEN/8, x8)

inst_120:
// rs1_val==-1431655765 and imm_val==4, 
// opcode: ori ; op1:x30; dest:x31; op1val:-0x55555555;  immval:0x4
TEST_IMM_OP( ori, x31, x30, 0xaaaaaaaf, -0x55555555, 0x4, x7, 94*XLEN/8, x8)

inst_121:
// rs1_val==-1431655765 and imm_val==0, 
// opcode: ori ; op1:x30; dest:x31; op1val:-0x55555555;  immval:0x0
TEST_IMM_OP( ori, x31, x30, 0xaaaaaaab, -0x55555555, 0x0, x7, 95*XLEN/8, x8)

inst_122:
// rs1_val==-1431655765 and imm_val==1364, 
// opcode: ori ; op1:x30; dest:x31; op1val:-0x55555555;  immval:0x554
TEST_IMM_OP( ori, x31, x30, 0xaaaaafff, -0x55555555, 0x554, x7, 96*XLEN/8, x8)

inst_123:
// rs1_val==-1431655765 and imm_val==2, 
// opcode: ori ; op1:x30; dest:x31; op1val:-0x55555555;  immval:0x2
TEST_IMM_OP( ori, x31, x30, 0xaaaaaaab, -0x55555555, 0x2, x7, 97*XLEN/8, x8)

inst_124:
// rs1_val==-1431655765 and imm_val==45, 
// opcode: ori ; op1:x30; dest:x31; op1val:-0x55555555;  immval:0x2d
TEST_IMM_OP( ori, x31, x30, 0xaaaaaaaf, -0x55555555, 0x2d, x7, 98*XLEN/8, x8)

inst_125:
// rs1_val==-1431655765 and imm_val==-45, 
// opcode: ori ; op1:x30; dest:x31; op1val:-0x55555555;  immval:-0x2d
TEST_IMM_OP( ori, x31, x30, 0xfffffffb, -0x55555555, -0x2d, x7, 99*XLEN/8, x8)

inst_126:
// rs1_val==-1431655765 and imm_val==1638, 
// opcode: ori ; op1:x30; dest:x31; op1val:-0x55555555;  immval:0x666
TEST_IMM_OP( ori, x31, x30, 0xaaaaaeef, -0x55555555, 0x666, x7, 100*XLEN/8, x8)

inst_127:
// rs1_val==-1431655765 and imm_val==819, 
// opcode: ori ; op1:x30; dest:x31; op1val:-0x55555555;  immval:0x333
TEST_IMM_OP( ori, x31, x30, 0xaaaaabbb, -0x55555555, 0x333, x7, 101*XLEN/8, x8)

inst_128:
// rs1_val==-1431655765 and imm_val==5, 
// opcode: ori ; op1:x30; dest:x31; op1val:-0x55555555;  immval:0x5
TEST_IMM_OP( ori, x31, x30, 0xaaaaaaaf, -0x55555555, 0x5, x7, 102*XLEN/8, x8)

inst_129:
// rs1_val==-1431655765 and imm_val==-1366, 
// opcode: ori ; op1:x30; dest:x31; op1val:-0x55555555;  immval:-0x556
TEST_IMM_OP( ori, x31, x30, 0xfffffaab, -0x55555555, -0x556, x7, 103*XLEN/8, x8)

inst_130:
// rs1_val==-1431655765 and imm_val==1365, 
// opcode: ori ; op1:x30; dest:x31; op1val:-0x55555555;  immval:0x555
TEST_IMM_OP( ori, x31, x30, 0xaaaaafff, -0x55555555, 0x555, x7, 104*XLEN/8, x8)

inst_131:
// rs1_val==-1431655765 and imm_val==3, 
// opcode: ori ; op1:x30; dest:x31; op1val:-0x55555555;  immval:0x3
TEST_IMM_OP( ori, x31, x30, 0xaaaaaaab, -0x55555555, 0x3, x7, 105*XLEN/8, x8)

inst_132:
// rs1_val==1431655766 and imm_val==46, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x55555556;  immval:0x2e
TEST_IMM_OP( ori, x31, x30, 0x5555557e, 0x55555556, 0x2e, x7, 106*XLEN/8, x8)

inst_133:
// rs1_val==1431655766 and imm_val==-44, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x55555556;  immval:-0x2c
TEST_IMM_OP( ori, x31, x30, 0xffffffd6, 0x55555556, -0x2c, x7, 107*XLEN/8, x8)

inst_134:
// rs1_val==1431655766 and imm_val==1639, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x55555556;  immval:0x667
TEST_IMM_OP( ori, x31, x30, 0x55555777, 0x55555556, 0x667, x7, 108*XLEN/8, x8)

inst_135:
// rs1_val==1431655766 and imm_val==820, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x55555556;  immval:0x334
TEST_IMM_OP( ori, x31, x30, 0x55555776, 0x55555556, 0x334, x7, 109*XLEN/8, x8)

inst_136:
// rs1_val==1431655766 and imm_val==6, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x55555556;  immval:0x6
TEST_IMM_OP( ori, x31, x30, 0x55555556, 0x55555556, 0x6, x7, 110*XLEN/8, x8)

inst_137:
// rs1_val==1431655766 and imm_val==-1365, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x55555556;  immval:-0x555
TEST_IMM_OP( ori, x31, x30, 0xffffffff, 0x55555556, -0x555, x7, 111*XLEN/8, x8)

inst_138:
// rs1_val==1431655766 and imm_val==1366, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x55555556;  immval:0x556
TEST_IMM_OP( ori, x31, x30, 0x55555556, 0x55555556, 0x556, x7, 112*XLEN/8, x8)

inst_139:
// rs1_val==1431655766 and imm_val==44, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x55555556;  immval:0x2c
TEST_IMM_OP( ori, x31, x30, 0x5555557e, 0x55555556, 0x2c, x7, 113*XLEN/8, x8)

inst_140:
// rs1_val==1431655766 and imm_val==1637, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x55555556;  immval:0x665
TEST_IMM_OP( ori, x31, x30, 0x55555777, 0x55555556, 0x665, x7, 114*XLEN/8, x8)

inst_141:
// rs1_val==1431655766 and imm_val==818, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x55555556;  immval:0x332
TEST_IMM_OP( ori, x31, x30, 0x55555776, 0x55555556, 0x332, x7, 115*XLEN/8, x8)

inst_142:
// rs1_val==1431655766 and imm_val==4, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x55555556;  immval:0x4
TEST_IMM_OP( ori, x31, x30, 0x55555556, 0x55555556, 0x4, x7, 116*XLEN/8, x8)

inst_143:
// rs1_val==1431655766 and imm_val==0, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x55555556;  immval:0x0
TEST_IMM_OP( ori, x31, x30, 0x55555556, 0x55555556, 0x0, x7, 117*XLEN/8, x8)

inst_144:
// rs1_val==1431655766 and imm_val==1364, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x55555556;  immval:0x554
TEST_IMM_OP( ori, x31, x30, 0x55555556, 0x55555556, 0x554, x7, 118*XLEN/8, x8)

inst_145:
// rs1_val==1431655766 and imm_val==2, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x55555556;  immval:0x2
TEST_IMM_OP( ori, x31, x30, 0x55555556, 0x55555556, 0x2, x7, 119*XLEN/8, x8)

inst_146:
// rs1_val==1431655766 and imm_val==45, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x55555556;  immval:0x2d
TEST_IMM_OP( ori, x31, x30, 0x5555557f, 0x55555556, 0x2d, x7, 120*XLEN/8, x8)

inst_147:
// rs1_val==1431655766 and imm_val==-45, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x55555556;  immval:-0x2d
TEST_IMM_OP( ori, x31, x30, 0xffffffd7, 0x55555556, -0x2d, x7, 121*XLEN/8, x8)

inst_148:
// rs1_val==1431655766 and imm_val==1638, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x55555556;  immval:0x666
TEST_IMM_OP( ori, x31, x30, 0x55555776, 0x55555556, 0x666, x7, 122*XLEN/8, x8)

inst_149:
// rs1_val==1431655766 and imm_val==819, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x55555556;  immval:0x333
TEST_IMM_OP( ori, x31, x30, 0x55555777, 0x55555556, 0x333, x7, 123*XLEN/8, x8)

inst_150:
// rs1_val==1431655766 and imm_val==5, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x55555556;  immval:0x5
TEST_IMM_OP( ori, x31, x30, 0x55555557, 0x55555556, 0x5, x7, 124*XLEN/8, x8)

inst_151:
// rs1_val==1431655766 and imm_val==-1366, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x55555556;  immval:-0x556
TEST_IMM_OP( ori, x31, x30, 0xfffffffe, 0x55555556, -0x556, x7, 125*XLEN/8, x8)

inst_152:
// rs1_val==1431655766 and imm_val==1365, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x55555556;  immval:0x555
TEST_IMM_OP( ori, x31, x30, 0x55555557, 0x55555556, 0x555, x7, 126*XLEN/8, x8)

inst_153:
// rs1_val==1431655766 and imm_val==3, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x55555556;  immval:0x3
TEST_IMM_OP( ori, x31, x30, 0x55555557, 0x55555556, 0x3, x7, 127*XLEN/8, x8)

inst_154:
// rs1_val==46339 and imm_val==46, 
// opcode: ori ; op1:x30; dest:x31; op1val:0xb503;  immval:0x2e
TEST_IMM_OP( ori, x31, x30, 0xb52f, 0xb503, 0x2e, x7, 128*XLEN/8, x8)

inst_155:
// rs1_val==46339 and imm_val==-44, 
// opcode: ori ; op1:x30; dest:x31; op1val:0xb503;  immval:-0x2c
TEST_IMM_OP( ori, x31, x30, 0xffffffd7, 0xb503, -0x2c, x7, 129*XLEN/8, x8)

inst_156:
// rs1_val==46339 and imm_val==1639, 
// opcode: ori ; op1:x30; dest:x31; op1val:0xb503;  immval:0x667
TEST_IMM_OP( ori, x31, x30, 0xb767, 0xb503, 0x667, x7, 130*XLEN/8, x8)

inst_157:
// rs1_val==46339 and imm_val==820, 
// opcode: ori ; op1:x30; dest:x31; op1val:0xb503;  immval:0x334
TEST_IMM_OP( ori, x31, x30, 0xb737, 0xb503, 0x334, x7, 131*XLEN/8, x8)

inst_158:
// rs1_val==46339 and imm_val==6, 
// opcode: ori ; op1:x30; dest:x31; op1val:0xb503;  immval:0x6
TEST_IMM_OP( ori, x31, x30, 0xb507, 0xb503, 0x6, x7, 132*XLEN/8, x8)

inst_159:
// rs1_val==46339 and imm_val==-1365, 
// opcode: ori ; op1:x30; dest:x31; op1val:0xb503;  immval:-0x555
TEST_IMM_OP( ori, x31, x30, 0xffffffab, 0xb503, -0x555, x7, 133*XLEN/8, x8)

inst_160:
// rs1_val==46339 and imm_val==1366, 
// opcode: ori ; op1:x30; dest:x31; op1val:0xb503;  immval:0x556
TEST_IMM_OP( ori, x31, x30, 0xb557, 0xb503, 0x556, x7, 134*XLEN/8, x8)

inst_161:
// rs1_val==46339 and imm_val==44, 
// opcode: ori ; op1:x30; dest:x31; op1val:0xb503;  immval:0x2c
TEST_IMM_OP( ori, x31, x30, 0xb52f, 0xb503, 0x2c, x7, 135*XLEN/8, x8)

inst_162:
// rs1_val==46339 and imm_val==1637, 
// opcode: ori ; op1:x30; dest:x31; op1val:0xb503;  immval:0x665
TEST_IMM_OP( ori, x31, x30, 0xb767, 0xb503, 0x665, x7, 136*XLEN/8, x8)

inst_163:
// rs1_val==46339 and imm_val==818, 
// opcode: ori ; op1:x30; dest:x31; op1val:0xb503;  immval:0x332
TEST_IMM_OP( ori, x31, x30, 0xb733, 0xb503, 0x332, x7, 137*XLEN/8, x8)

inst_164:
// rs1_val==46339 and imm_val==4, 
// opcode: ori ; op1:x30; dest:x31; op1val:0xb503;  immval:0x4
TEST_IMM_OP( ori, x31, x30, 0xb507, 0xb503, 0x4, x7, 138*XLEN/8, x8)

inst_165:
// rs1_val==46339 and imm_val==0, 
// opcode: ori ; op1:x30; dest:x31; op1val:0xb503;  immval:0x0
TEST_IMM_OP( ori, x31, x30, 0xb503, 0xb503, 0x0, x7, 139*XLEN/8, x8)

inst_166:
// rs1_val==46339 and imm_val==1364, 
// opcode: ori ; op1:x30; dest:x31; op1val:0xb503;  immval:0x554
TEST_IMM_OP( ori, x31, x30, 0xb557, 0xb503, 0x554, x7, 140*XLEN/8, x8)

inst_167:
// rs1_val==46339 and imm_val==2, 
// opcode: ori ; op1:x30; dest:x31; op1val:0xb503;  immval:0x2
TEST_IMM_OP( ori, x31, x30, 0xb503, 0xb503, 0x2, x7, 141*XLEN/8, x8)

inst_168:
// rs1_val==46339 and imm_val==45, 
// opcode: ori ; op1:x30; dest:x31; op1val:0xb503;  immval:0x2d
TEST_IMM_OP( ori, x31, x30, 0xb52f, 0xb503, 0x2d, x7, 142*XLEN/8, x8)

inst_169:
// rs1_val==46339 and imm_val==-45, 
// opcode: ori ; op1:x30; dest:x31; op1val:0xb503;  immval:-0x2d
TEST_IMM_OP( ori, x31, x30, 0xffffffd3, 0xb503, -0x2d, x7, 143*XLEN/8, x8)

inst_170:
// rs1_val==46339 and imm_val==1638, 
// opcode: ori ; op1:x30; dest:x31; op1val:0xb503;  immval:0x666
TEST_IMM_OP( ori, x31, x30, 0xb767, 0xb503, 0x666, x7, 144*XLEN/8, x8)

inst_171:
// rs1_val==46339 and imm_val==819, 
// opcode: ori ; op1:x30; dest:x31; op1val:0xb503;  immval:0x333
TEST_IMM_OP( ori, x31, x30, 0xb733, 0xb503, 0x333, x7, 145*XLEN/8, x8)

inst_172:
// rs1_val==46339 and imm_val==5, 
// opcode: ori ; op1:x30; dest:x31; op1val:0xb503;  immval:0x5
TEST_IMM_OP( ori, x31, x30, 0xb507, 0xb503, 0x5, x7, 146*XLEN/8, x8)

inst_173:
// rs1_val==46339 and imm_val==-1366, 
// opcode: ori ; op1:x30; dest:x31; op1val:0xb503;  immval:-0x556
TEST_IMM_OP( ori, x31, x30, 0xffffffab, 0xb503, -0x556, x7, 147*XLEN/8, x8)

inst_174:
// rs1_val==46339 and imm_val==1365, 
// opcode: ori ; op1:x30; dest:x31; op1val:0xb503;  immval:0x555
TEST_IMM_OP( ori, x31, x30, 0xb557, 0xb503, 0x555, x7, 148*XLEN/8, x8)

inst_175:
// rs1_val==46339 and imm_val==3, 
// opcode: ori ; op1:x30; dest:x31; op1val:0xb503;  immval:0x3
TEST_IMM_OP( ori, x31, x30, 0xb503, 0xb503, 0x3, x7, 149*XLEN/8, x8)

inst_176:
// rs1_val==1717986917 and imm_val==46, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x66666665;  immval:0x2e
TEST_IMM_OP( ori, x31, x30, 0x6666666f, 0x66666665, 0x2e, x7, 150*XLEN/8, x8)

inst_177:
// rs1_val==1717986917 and imm_val==-44, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x66666665;  immval:-0x2c
TEST_IMM_OP( ori, x31, x30, 0xfffffff5, 0x66666665, -0x2c, x7, 151*XLEN/8, x8)

inst_178:
// rs1_val==1717986917 and imm_val==1639, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x66666665;  immval:0x667
TEST_IMM_OP( ori, x31, x30, 0x66666667, 0x66666665, 0x667, x7, 152*XLEN/8, x8)

inst_179:
// rs1_val==1717986917 and imm_val==820, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x66666665;  immval:0x334
TEST_IMM_OP( ori, x31, x30, 0x66666775, 0x66666665, 0x334, x7, 153*XLEN/8, x8)

inst_180:
// rs1_val==1717986917 and imm_val==6, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x66666665;  immval:0x6
TEST_IMM_OP( ori, x31, x30, 0x66666667, 0x66666665, 0x6, x7, 154*XLEN/8, x8)

inst_181:
// rs1_val==1717986917 and imm_val==-1365, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x66666665;  immval:-0x555
TEST_IMM_OP( ori, x31, x30, 0xfffffeef, 0x66666665, -0x555, x7, 155*XLEN/8, x8)

inst_182:
// rs1_val==1717986917 and imm_val==1366, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x66666665;  immval:0x556
TEST_IMM_OP( ori, x31, x30, 0x66666777, 0x66666665, 0x556, x7, 156*XLEN/8, x8)

inst_183:
// rs1_val==1717986917 and imm_val==44, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x66666665;  immval:0x2c
TEST_IMM_OP( ori, x31, x30, 0x6666666d, 0x66666665, 0x2c, x7, 157*XLEN/8, x8)

inst_184:
// rs1_val==1717986917 and imm_val==1637, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x66666665;  immval:0x665
TEST_IMM_OP( ori, x31, x30, 0x66666665, 0x66666665, 0x665, x7, 158*XLEN/8, x8)

inst_185:
// rs1_val==1717986917 and imm_val==818, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x66666665;  immval:0x332
TEST_IMM_OP( ori, x31, x30, 0x66666777, 0x66666665, 0x332, x7, 159*XLEN/8, x8)

inst_186:
// rs1_val==1717986917 and imm_val==4, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x66666665;  immval:0x4
TEST_IMM_OP( ori, x31, x30, 0x66666665, 0x66666665, 0x4, x7, 160*XLEN/8, x8)

inst_187:
// rs1_val==1717986917 and imm_val==0, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x66666665;  immval:0x0
TEST_IMM_OP( ori, x31, x30, 0x66666665, 0x66666665, 0x0, x7, 161*XLEN/8, x8)

inst_188:
// rs1_val==1717986917 and imm_val==1364, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x66666665;  immval:0x554
TEST_IMM_OP( ori, x31, x30, 0x66666775, 0x66666665, 0x554, x7, 162*XLEN/8, x8)

inst_189:
// rs1_val==1717986917 and imm_val==2, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x66666665;  immval:0x2
TEST_IMM_OP( ori, x31, x30, 0x66666667, 0x66666665, 0x2, x7, 163*XLEN/8, x8)

inst_190:
// rs1_val==1717986917 and imm_val==45, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x66666665;  immval:0x2d
TEST_IMM_OP( ori, x31, x30, 0x6666666d, 0x66666665, 0x2d, x7, 164*XLEN/8, x8)

inst_191:
// rs1_val==1717986917 and imm_val==-45, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x66666665;  immval:-0x2d
TEST_IMM_OP( ori, x31, x30, 0xfffffff7, 0x66666665, -0x2d, x7, 165*XLEN/8, x8)

inst_192:
// rs1_val==1717986917 and imm_val==1638, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x66666665;  immval:0x666
TEST_IMM_OP( ori, x31, x30, 0x66666667, 0x66666665, 0x666, x7, 166*XLEN/8, x8)

inst_193:
// rs1_val==1717986917 and imm_val==819, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x66666665;  immval:0x333
TEST_IMM_OP( ori, x31, x30, 0x66666777, 0x66666665, 0x333, x7, 167*XLEN/8, x8)

inst_194:
// rs1_val==1717986917 and imm_val==5, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x66666665;  immval:0x5
TEST_IMM_OP( ori, x31, x30, 0x66666665, 0x66666665, 0x5, x7, 168*XLEN/8, x8)

inst_195:
// rs1_val==1717986917 and imm_val==-1366, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x66666665;  immval:-0x556
TEST_IMM_OP( ori, x31, x30, 0xfffffeef, 0x66666665, -0x556, x7, 169*XLEN/8, x8)

inst_196:
// rs1_val==1717986917 and imm_val==1365, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x66666665;  immval:0x555
TEST_IMM_OP( ori, x31, x30, 0x66666775, 0x66666665, 0x555, x7, 170*XLEN/8, x8)

inst_197:
// rs1_val==1717986917 and imm_val==3, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x66666665;  immval:0x3
TEST_IMM_OP( ori, x31, x30, 0x66666667, 0x66666665, 0x3, x7, 171*XLEN/8, x8)

inst_198:
// rs1_val==858993458 and imm_val==46, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x33333332;  immval:0x2e
TEST_IMM_OP( ori, x31, x30, 0x3333333e, 0x33333332, 0x2e, x7, 172*XLEN/8, x8)

inst_199:
// rs1_val==858993458 and imm_val==-44, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x33333332;  immval:-0x2c
TEST_IMM_OP( ori, x31, x30, 0xfffffff6, 0x33333332, -0x2c, x7, 173*XLEN/8, x8)

inst_200:
// rs1_val==858993458 and imm_val==1639, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x33333332;  immval:0x667
TEST_IMM_OP( ori, x31, x30, 0x33333777, 0x33333332, 0x667, x7, 174*XLEN/8, x8)

inst_201:
// rs1_val==858993458 and imm_val==820, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x33333332;  immval:0x334
TEST_IMM_OP( ori, x31, x30, 0x33333336, 0x33333332, 0x334, x7, 175*XLEN/8, x8)

inst_202:
// rs1_val==858993458 and imm_val==6, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x33333332;  immval:0x6
TEST_IMM_OP( ori, x31, x30, 0x33333336, 0x33333332, 0x6, x7, 176*XLEN/8, x8)

inst_203:
// rs1_val==858993458 and imm_val==-1365, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x33333332;  immval:-0x555
TEST_IMM_OP( ori, x31, x30, 0xfffffbbb, 0x33333332, -0x555, x7, 177*XLEN/8, x8)

inst_204:
// rs1_val==858993458 and imm_val==1366, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x33333332;  immval:0x556
TEST_IMM_OP( ori, x31, x30, 0x33333776, 0x33333332, 0x556, x7, 178*XLEN/8, x8)

inst_205:
// rs1_val==858993458 and imm_val==44, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x33333332;  immval:0x2c
TEST_IMM_OP( ori, x31, x30, 0x3333333e, 0x33333332, 0x2c, x7, 179*XLEN/8, x8)

inst_206:
// rs1_val==858993458 and imm_val==1637, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x33333332;  immval:0x665
TEST_IMM_OP( ori, x31, x30, 0x33333777, 0x33333332, 0x665, x7, 180*XLEN/8, x8)

inst_207:
// rs1_val==858993458 and imm_val==818, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x33333332;  immval:0x332
TEST_IMM_OP( ori, x31, x30, 0x33333332, 0x33333332, 0x332, x7, 181*XLEN/8, x8)

inst_208:
// rs1_val==858993458 and imm_val==4, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x33333332;  immval:0x4
TEST_IMM_OP( ori, x31, x30, 0x33333336, 0x33333332, 0x4, x7, 182*XLEN/8, x8)

inst_209:
// rs1_val==858993458 and imm_val==0, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x33333332;  immval:0x0
TEST_IMM_OP( ori, x31, x30, 0x33333332, 0x33333332, 0x0, x7, 183*XLEN/8, x8)

inst_210:
// rs1_val==858993458 and imm_val==1364, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x33333332;  immval:0x554
TEST_IMM_OP( ori, x31, x30, 0x33333776, 0x33333332, 0x554, x7, 184*XLEN/8, x8)

inst_211:
// rs1_val==858993458 and imm_val==2, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x33333332;  immval:0x2
TEST_IMM_OP( ori, x31, x30, 0x33333332, 0x33333332, 0x2, x7, 185*XLEN/8, x8)

inst_212:
// rs1_val==858993458 and imm_val==45, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x33333332;  immval:0x2d
TEST_IMM_OP( ori, x31, x30, 0x3333333f, 0x33333332, 0x2d, x7, 186*XLEN/8, x8)

inst_213:
// rs1_val==858993458 and imm_val==-45, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x33333332;  immval:-0x2d
TEST_IMM_OP( ori, x31, x30, 0xfffffff3, 0x33333332, -0x2d, x7, 187*XLEN/8, x8)

inst_214:
// rs1_val==858993458 and imm_val==1638, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x33333332;  immval:0x666
TEST_IMM_OP( ori, x31, x30, 0x33333776, 0x33333332, 0x666, x7, 188*XLEN/8, x8)

inst_215:
// rs1_val==858993458 and imm_val==819, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x33333332;  immval:0x333
TEST_IMM_OP( ori, x31, x30, 0x33333333, 0x33333332, 0x333, x7, 189*XLEN/8, x8)

inst_216:
// rs1_val==858993458 and imm_val==5, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x33333332;  immval:0x5
TEST_IMM_OP( ori, x31, x30, 0x33333337, 0x33333332, 0x5, x7, 190*XLEN/8, x8)

inst_217:
// rs1_val==858993458 and imm_val==-1366, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x33333332;  immval:-0x556
TEST_IMM_OP( ori, x31, x30, 0xfffffbba, 0x33333332, -0x556, x7, 191*XLEN/8, x8)

inst_218:
// rs1_val==858993458 and imm_val==1365, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x33333332;  immval:0x555
TEST_IMM_OP( ori, x31, x30, 0x33333777, 0x33333332, 0x555, x7, 192*XLEN/8, x8)

inst_219:
// rs1_val==858993458 and imm_val==3, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x33333332;  immval:0x3
TEST_IMM_OP( ori, x31, x30, 0x33333333, 0x33333332, 0x3, x7, 193*XLEN/8, x8)

inst_220:
// rs1_val==4 and imm_val==46, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x4;  immval:0x2e
TEST_IMM_OP( ori, x31, x30, 0x2e, 0x4, 0x2e, x7, 194*XLEN/8, x8)

inst_221:
// rs1_val==4 and imm_val==-44, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x4;  immval:-0x2c
TEST_IMM_OP( ori, x31, x30, 0xffffffd4, 0x4, -0x2c, x7, 195*XLEN/8, x8)

inst_222:
// rs1_val==4 and imm_val==1639, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x4;  immval:0x667
TEST_IMM_OP( ori, x31, x30, 0x667, 0x4, 0x667, x7, 196*XLEN/8, x8)

inst_223:
// rs1_val==4 and imm_val==820, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x4;  immval:0x334
TEST_IMM_OP( ori, x31, x30, 0x334, 0x4, 0x334, x7, 197*XLEN/8, x8)

inst_224:
// rs1_val==4 and imm_val==6, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x4;  immval:0x6
TEST_IMM_OP( ori, x31, x30, 0x6, 0x4, 0x6, x7, 198*XLEN/8, x8)

inst_225:
// rs1_val==4 and imm_val==-1365, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x4;  immval:-0x555
TEST_IMM_OP( ori, x31, x30, 0xfffffaaf, 0x4, -0x555, x7, 199*XLEN/8, x8)

inst_226:
// rs1_val==4 and imm_val==1366, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x4;  immval:0x556
TEST_IMM_OP( ori, x31, x30, 0x556, 0x4, 0x556, x7, 200*XLEN/8, x8)

inst_227:
// rs1_val==4 and imm_val==44, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x4;  immval:0x2c
TEST_IMM_OP( ori, x31, x30, 0x2c, 0x4, 0x2c, x7, 201*XLEN/8, x8)

inst_228:
// rs1_val==4 and imm_val==1637, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x4;  immval:0x665
TEST_IMM_OP( ori, x31, x30, 0x665, 0x4, 0x665, x7, 202*XLEN/8, x8)

inst_229:
// rs1_val==4 and imm_val==818, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x4;  immval:0x332
TEST_IMM_OP( ori, x31, x30, 0x336, 0x4, 0x332, x7, 203*XLEN/8, x8)

inst_230:
// rs1_val==4 and imm_val==4, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x4;  immval:0x4
TEST_IMM_OP( ori, x31, x30, 0x4, 0x4, 0x4, x7, 204*XLEN/8, x8)

inst_231:
// rs1_val==4 and imm_val==0, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x4;  immval:0x0
TEST_IMM_OP( ori, x31, x30, 0x4, 0x4, 0x0, x7, 205*XLEN/8, x8)

inst_232:
// rs1_val==4 and imm_val==1364, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x4;  immval:0x554
TEST_IMM_OP( ori, x31, x30, 0x554, 0x4, 0x554, x7, 206*XLEN/8, x8)

inst_233:
// rs1_val==4 and imm_val==2, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x4;  immval:0x2
TEST_IMM_OP( ori, x31, x30, 0x6, 0x4, 0x2, x7, 207*XLEN/8, x8)

inst_234:
// rs1_val==4 and imm_val==45, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x4;  immval:0x2d
TEST_IMM_OP( ori, x31, x30, 0x2d, 0x4, 0x2d, x7, 208*XLEN/8, x8)

inst_235:
// rs1_val==4 and imm_val==-45, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x4;  immval:-0x2d
TEST_IMM_OP( ori, x31, x30, 0xffffffd7, 0x4, -0x2d, x7, 209*XLEN/8, x8)

inst_236:
// rs1_val==4 and imm_val==1638, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x4;  immval:0x666
TEST_IMM_OP( ori, x31, x30, 0x666, 0x4, 0x666, x7, 210*XLEN/8, x8)

inst_237:
// rs1_val==4 and imm_val==819, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x4;  immval:0x333
TEST_IMM_OP( ori, x31, x30, 0x337, 0x4, 0x333, x7, 211*XLEN/8, x8)

inst_238:
// rs1_val==4 and imm_val==5, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x4;  immval:0x5
TEST_IMM_OP( ori, x31, x30, 0x5, 0x4, 0x5, x7, 212*XLEN/8, x8)

inst_239:
// rs1_val==4 and imm_val==-1366, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x4;  immval:-0x556
TEST_IMM_OP( ori, x31, x30, 0xfffffaae, 0x4, -0x556, x7, 213*XLEN/8, x8)

inst_240:
// rs1_val==4 and imm_val==1365, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x4;  immval:0x555
TEST_IMM_OP( ori, x31, x30, 0x555, 0x4, 0x555, x7, 214*XLEN/8, x8)

inst_241:
// rs1_val==4 and imm_val==3, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x4;  immval:0x3
TEST_IMM_OP( ori, x31, x30, 0x7, 0x4, 0x3, x7, 215*XLEN/8, x8)

inst_242:
// rs1_val==0 and imm_val==46, rs1_val == 0
// opcode: ori ; op1:x30; dest:x31; op1val:0x0;  immval:0x2e
TEST_IMM_OP( ori, x31, x30, 0x2e, 0x0, 0x2e, x7, 216*XLEN/8, x8)

inst_243:
// rs1_val==0 and imm_val==-44, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x0;  immval:-0x2c
TEST_IMM_OP( ori, x31, x30, 0xffffffd4, 0x0, -0x2c, x7, 217*XLEN/8, x8)

inst_244:
// rs1_val==0 and imm_val==1639, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x0;  immval:0x667
TEST_IMM_OP( ori, x31, x30, 0x667, 0x0, 0x667, x7, 218*XLEN/8, x8)

inst_245:
// rs1_val==0 and imm_val==820, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x0;  immval:0x334
TEST_IMM_OP( ori, x31, x30, 0x334, 0x0, 0x334, x7, 219*XLEN/8, x8)

inst_246:
// rs1_val==0 and imm_val==6, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x0;  immval:0x6
TEST_IMM_OP( ori, x31, x30, 0x6, 0x0, 0x6, x7, 220*XLEN/8, x8)

inst_247:
// rs1_val==0 and imm_val==-1365, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x0;  immval:-0x555
TEST_IMM_OP( ori, x31, x30, 0xfffffaab, 0x0, -0x555, x7, 221*XLEN/8, x8)

inst_248:
// rs1_val==0 and imm_val==1366, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x0;  immval:0x556
TEST_IMM_OP( ori, x31, x30, 0x556, 0x0, 0x556, x7, 222*XLEN/8, x8)

inst_249:
// rs1_val==0 and imm_val==44, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x0;  immval:0x2c
TEST_IMM_OP( ori, x31, x30, 0x2c, 0x0, 0x2c, x7, 223*XLEN/8, x8)

inst_250:
// rs1_val==0 and imm_val==1637, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x0;  immval:0x665
TEST_IMM_OP( ori, x31, x30, 0x665, 0x0, 0x665, x7, 224*XLEN/8, x8)

inst_251:
// rs1_val==0 and imm_val==818, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x0;  immval:0x332
TEST_IMM_OP( ori, x31, x30, 0x332, 0x0, 0x332, x7, 225*XLEN/8, x8)

inst_252:
// rs1_val==0 and imm_val==4, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x0;  immval:0x4
TEST_IMM_OP( ori, x31, x30, 0x4, 0x0, 0x4, x7, 226*XLEN/8, x8)

inst_253:
// rs1_val==0 and imm_val==0, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x0;  immval:0x0
TEST_IMM_OP( ori, x31, x30, 0x0, 0x0, 0x0, x7, 227*XLEN/8, x8)

inst_254:
// rs1_val==0 and imm_val==1364, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x0;  immval:0x554
TEST_IMM_OP( ori, x31, x30, 0x554, 0x0, 0x554, x7, 228*XLEN/8, x8)

inst_255:
// rs1_val==0 and imm_val==2, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x0;  immval:0x2
TEST_IMM_OP( ori, x31, x30, 0x2, 0x0, 0x2, x7, 229*XLEN/8, x8)

inst_256:
// rs1_val==0 and imm_val==45, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x0;  immval:0x2d
TEST_IMM_OP( ori, x31, x30, 0x2d, 0x0, 0x2d, x7, 230*XLEN/8, x8)

inst_257:
// rs1_val==0 and imm_val==-45, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x0;  immval:-0x2d
TEST_IMM_OP( ori, x31, x30, 0xffffffd3, 0x0, -0x2d, x7, 231*XLEN/8, x8)

inst_258:
// rs1_val==0 and imm_val==1638, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x0;  immval:0x666
TEST_IMM_OP( ori, x31, x30, 0x666, 0x0, 0x666, x7, 232*XLEN/8, x8)

inst_259:
// rs1_val==0 and imm_val==819, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x0;  immval:0x333
TEST_IMM_OP( ori, x31, x30, 0x333, 0x0, 0x333, x7, 233*XLEN/8, x8)

inst_260:
// rs1_val==0 and imm_val==5, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x0;  immval:0x5
TEST_IMM_OP( ori, x31, x30, 0x5, 0x0, 0x5, x7, 234*XLEN/8, x8)

inst_261:
// rs1_val==0 and imm_val==-1366, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x0;  immval:-0x556
TEST_IMM_OP( ori, x31, x30, 0xfffffaaa, 0x0, -0x556, x7, 235*XLEN/8, x8)

inst_262:
// rs1_val==0 and imm_val==1365, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x0;  immval:0x555
TEST_IMM_OP( ori, x31, x30, 0x555, 0x0, 0x555, x7, 236*XLEN/8, x8)

inst_263:
// rs1_val==0 and imm_val==3, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x0;  immval:0x3
TEST_IMM_OP( ori, x31, x30, 0x3, 0x0, 0x3, x7, 237*XLEN/8, x8)

inst_264:
// rs1_val==1431655764 and imm_val==46, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x55555554;  immval:0x2e
TEST_IMM_OP( ori, x31, x30, 0x5555557e, 0x55555554, 0x2e, x7, 238*XLEN/8, x8)

inst_265:
// rs1_val==1431655764 and imm_val==-44, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x55555554;  immval:-0x2c
TEST_IMM_OP( ori, x31, x30, 0xffffffd4, 0x55555554, -0x2c, x7, 239*XLEN/8, x8)

inst_266:
// rs1_val==1431655764 and imm_val==1639, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x55555554;  immval:0x667
TEST_IMM_OP( ori, x31, x30, 0x55555777, 0x55555554, 0x667, x7, 240*XLEN/8, x8)

inst_267:
// rs1_val==1431655764 and imm_val==820, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x55555554;  immval:0x334
TEST_IMM_OP( ori, x31, x30, 0x55555774, 0x55555554, 0x334, x7, 241*XLEN/8, x8)

inst_268:
// rs1_val==1431655764 and imm_val==6, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x55555554;  immval:0x6
TEST_IMM_OP( ori, x31, x30, 0x55555556, 0x55555554, 0x6, x7, 242*XLEN/8, x8)

inst_269:
// rs1_val==1431655764 and imm_val==-1365, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x55555554;  immval:-0x555
TEST_IMM_OP( ori, x31, x30, 0xffffffff, 0x55555554, -0x555, x7, 243*XLEN/8, x8)

inst_270:
// rs1_val==1431655764 and imm_val==1366, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x55555554;  immval:0x556
TEST_IMM_OP( ori, x31, x30, 0x55555556, 0x55555554, 0x556, x7, 244*XLEN/8, x8)

inst_271:
// rs1_val==1431655764 and imm_val==44, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x55555554;  immval:0x2c
TEST_IMM_OP( ori, x31, x30, 0x5555557c, 0x55555554, 0x2c, x7, 245*XLEN/8, x8)

inst_272:
// rs1_val==1431655764 and imm_val==1637, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x55555554;  immval:0x665
TEST_IMM_OP( ori, x31, x30, 0x55555775, 0x55555554, 0x665, x7, 246*XLEN/8, x8)

inst_273:
// rs1_val==1431655764 and imm_val==818, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x55555554;  immval:0x332
TEST_IMM_OP( ori, x31, x30, 0x55555776, 0x55555554, 0x332, x7, 247*XLEN/8, x8)

inst_274:
// rs1_val==1431655764 and imm_val==4, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x55555554;  immval:0x4
TEST_IMM_OP( ori, x31, x30, 0x55555554, 0x55555554, 0x4, x7, 248*XLEN/8, x8)

inst_275:
// rs1_val==1431655764 and imm_val==0, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x55555554;  immval:0x0
TEST_IMM_OP( ori, x31, x30, 0x55555554, 0x55555554, 0x0, x7, 249*XLEN/8, x8)

inst_276:
// rs1_val==1431655764 and imm_val==1364, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x55555554;  immval:0x554
TEST_IMM_OP( ori, x31, x30, 0x55555554, 0x55555554, 0x554, x7, 250*XLEN/8, x8)

inst_277:
// rs1_val==1431655764 and imm_val==2, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x55555554;  immval:0x2
TEST_IMM_OP( ori, x31, x30, 0x55555556, 0x55555554, 0x2, x7, 251*XLEN/8, x8)

inst_278:
// rs1_val==1431655764 and imm_val==45, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x55555554;  immval:0x2d
TEST_IMM_OP( ori, x31, x30, 0x5555557d, 0x55555554, 0x2d, x7, 252*XLEN/8, x8)

inst_279:
// rs1_val==1431655764 and imm_val==-45, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x55555554;  immval:-0x2d
TEST_IMM_OP( ori, x31, x30, 0xffffffd7, 0x55555554, -0x2d, x7, 253*XLEN/8, x8)

inst_280:
// rs1_val==1431655764 and imm_val==1638, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x55555554;  immval:0x666
TEST_IMM_OP( ori, x31, x30, 0x55555776, 0x55555554, 0x666, x7, 254*XLEN/8, x8)

inst_281:
// rs1_val==1431655764 and imm_val==819, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x55555554;  immval:0x333
TEST_IMM_OP( ori, x31, x30, 0x55555777, 0x55555554, 0x333, x7, 255*XLEN/8, x8)
RVTEST_SIGBASE(x7,signature_x7_1)

inst_282:
// rs1_val==1431655764 and imm_val==5, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x55555554;  immval:0x5
TEST_IMM_OP( ori, x31, x30, 0x55555555, 0x55555554, 0x5, x7, 0*XLEN/8, x8)

inst_283:
// rs1_val==1431655764 and imm_val==-1366, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x55555554;  immval:-0x556
TEST_IMM_OP( ori, x31, x30, 0xfffffffe, 0x55555554, -0x556, x7, 1*XLEN/8, x8)

inst_284:
// rs1_val==1431655764 and imm_val==1365, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x55555554;  immval:0x555
TEST_IMM_OP( ori, x31, x30, 0x55555555, 0x55555554, 0x555, x7, 2*XLEN/8, x8)

inst_285:
// rs1_val==1431655764 and imm_val==3, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x55555554;  immval:0x3
TEST_IMM_OP( ori, x31, x30, 0x55555557, 0x55555554, 0x3, x7, 3*XLEN/8, x8)

inst_286:
// rs1_val==2 and imm_val==46, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x2;  immval:0x2e
TEST_IMM_OP( ori, x31, x30, 0x2e, 0x2, 0x2e, x7, 4*XLEN/8, x8)

inst_287:
// rs1_val==2 and imm_val==-44, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x2;  immval:-0x2c
TEST_IMM_OP( ori, x31, x30, 0xffffffd6, 0x2, -0x2c, x7, 5*XLEN/8, x8)

inst_288:
// rs1_val==2 and imm_val==1639, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x2;  immval:0x667
TEST_IMM_OP( ori, x31, x30, 0x667, 0x2, 0x667, x7, 6*XLEN/8, x8)

inst_289:
// rs1_val==2 and imm_val==820, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x2;  immval:0x334
TEST_IMM_OP( ori, x31, x30, 0x336, 0x2, 0x334, x7, 7*XLEN/8, x8)

inst_290:
// rs1_val==2 and imm_val==6, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x2;  immval:0x6
TEST_IMM_OP( ori, x31, x30, 0x6, 0x2, 0x6, x7, 8*XLEN/8, x8)

inst_291:
// rs1_val==2 and imm_val==-1365, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x2;  immval:-0x555
TEST_IMM_OP( ori, x31, x30, 0xfffffaab, 0x2, -0x555, x7, 9*XLEN/8, x8)

inst_292:
// rs1_val==2 and imm_val==1366, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x2;  immval:0x556
TEST_IMM_OP( ori, x31, x30, 0x556, 0x2, 0x556, x7, 10*XLEN/8, x8)

inst_293:
// rs1_val==2 and imm_val==44, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x2;  immval:0x2c
TEST_IMM_OP( ori, x31, x30, 0x2e, 0x2, 0x2c, x7, 11*XLEN/8, x8)

inst_294:
// rs1_val==2 and imm_val==1637, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x2;  immval:0x665
TEST_IMM_OP( ori, x31, x30, 0x667, 0x2, 0x665, x7, 12*XLEN/8, x8)

inst_295:
// rs1_val==2 and imm_val==818, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x2;  immval:0x332
TEST_IMM_OP( ori, x31, x30, 0x332, 0x2, 0x332, x7, 13*XLEN/8, x8)

inst_296:
// rs1_val==2 and imm_val==4, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x2;  immval:0x4
TEST_IMM_OP( ori, x31, x30, 0x6, 0x2, 0x4, x7, 14*XLEN/8, x8)

inst_297:
// rs1_val==2 and imm_val==0, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x2;  immval:0x0
TEST_IMM_OP( ori, x31, x30, 0x2, 0x2, 0x0, x7, 15*XLEN/8, x8)

inst_298:
// rs1_val==2 and imm_val==1364, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x2;  immval:0x554
TEST_IMM_OP( ori, x31, x30, 0x556, 0x2, 0x554, x7, 16*XLEN/8, x8)

inst_299:
// rs1_val==2 and imm_val==2, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x2;  immval:0x2
TEST_IMM_OP( ori, x31, x30, 0x2, 0x2, 0x2, x7, 17*XLEN/8, x8)

inst_300:
// rs1_val==2 and imm_val==45, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x2;  immval:0x2d
TEST_IMM_OP( ori, x31, x30, 0x2f, 0x2, 0x2d, x7, 18*XLEN/8, x8)

inst_301:
// rs1_val==2 and imm_val==-45, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x2;  immval:-0x2d
TEST_IMM_OP( ori, x31, x30, 0xffffffd3, 0x2, -0x2d, x7, 19*XLEN/8, x8)

inst_302:
// rs1_val==2 and imm_val==1638, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x2;  immval:0x666
TEST_IMM_OP( ori, x31, x30, 0x666, 0x2, 0x666, x7, 20*XLEN/8, x8)

inst_303:
// rs1_val==2 and imm_val==819, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x2;  immval:0x333
TEST_IMM_OP( ori, x31, x30, 0x333, 0x2, 0x333, x7, 21*XLEN/8, x8)

inst_304:
// rs1_val==2 and imm_val==5, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x2;  immval:0x5
TEST_IMM_OP( ori, x31, x30, 0x7, 0x2, 0x5, x7, 22*XLEN/8, x8)

inst_305:
// rs1_val==2 and imm_val==-1366, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x2;  immval:-0x556
TEST_IMM_OP( ori, x31, x30, 0xfffffaaa, 0x2, -0x556, x7, 23*XLEN/8, x8)

inst_306:
// rs1_val==2 and imm_val==1365, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x2;  immval:0x555
TEST_IMM_OP( ori, x31, x30, 0x557, 0x2, 0x555, x7, 24*XLEN/8, x8)

inst_307:
// rs1_val==2 and imm_val==3, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x2;  immval:0x3
TEST_IMM_OP( ori, x31, x30, 0x3, 0x2, 0x3, x7, 25*XLEN/8, x8)

inst_308:
// rs1_val==46340 and imm_val==46, 
// opcode: ori ; op1:x30; dest:x31; op1val:0xb504;  immval:0x2e
TEST_IMM_OP( ori, x31, x30, 0xb52e, 0xb504, 0x2e, x7, 26*XLEN/8, x8)

inst_309:
// rs1_val==46340 and imm_val==-44, 
// opcode: ori ; op1:x30; dest:x31; op1val:0xb504;  immval:-0x2c
TEST_IMM_OP( ori, x31, x30, 0xffffffd4, 0xb504, -0x2c, x7, 27*XLEN/8, x8)

inst_310:
// rs1_val==46340 and imm_val==1639, 
// opcode: ori ; op1:x30; dest:x31; op1val:0xb504;  immval:0x667
TEST_IMM_OP( ori, x31, x30, 0xb767, 0xb504, 0x667, x7, 28*XLEN/8, x8)

inst_311:
// rs1_val==46340 and imm_val==820, 
// opcode: ori ; op1:x30; dest:x31; op1val:0xb504;  immval:0x334
TEST_IMM_OP( ori, x31, x30, 0xb734, 0xb504, 0x334, x7, 29*XLEN/8, x8)

inst_312:
// rs1_val==46340 and imm_val==6, 
// opcode: ori ; op1:x30; dest:x31; op1val:0xb504;  immval:0x6
TEST_IMM_OP( ori, x31, x30, 0xb506, 0xb504, 0x6, x7, 30*XLEN/8, x8)

inst_313:
// rs1_val==46340 and imm_val==-1365, 
// opcode: ori ; op1:x30; dest:x31; op1val:0xb504;  immval:-0x555
TEST_IMM_OP( ori, x31, x30, 0xffffffaf, 0xb504, -0x555, x7, 31*XLEN/8, x8)

inst_314:
// rs1_val==46340 and imm_val==1366, 
// opcode: ori ; op1:x30; dest:x31; op1val:0xb504;  immval:0x556
TEST_IMM_OP( ori, x31, x30, 0xb556, 0xb504, 0x556, x7, 32*XLEN/8, x8)

inst_315:
// rs1_val==46340 and imm_val==44, 
// opcode: ori ; op1:x30; dest:x31; op1val:0xb504;  immval:0x2c
TEST_IMM_OP( ori, x31, x30, 0xb52c, 0xb504, 0x2c, x7, 33*XLEN/8, x8)

inst_316:
// rs1_val==46340 and imm_val==1637, 
// opcode: ori ; op1:x30; dest:x31; op1val:0xb504;  immval:0x665
TEST_IMM_OP( ori, x31, x30, 0xb765, 0xb504, 0x665, x7, 34*XLEN/8, x8)

inst_317:
// rs1_val==46340 and imm_val==818, 
// opcode: ori ; op1:x30; dest:x31; op1val:0xb504;  immval:0x332
TEST_IMM_OP( ori, x31, x30, 0xb736, 0xb504, 0x332, x7, 35*XLEN/8, x8)

inst_318:
// rs1_val==46340 and imm_val==4, 
// opcode: ori ; op1:x30; dest:x31; op1val:0xb504;  immval:0x4
TEST_IMM_OP( ori, x31, x30, 0xb504, 0xb504, 0x4, x7, 36*XLEN/8, x8)

inst_319:
// rs1_val==46340 and imm_val==0, 
// opcode: ori ; op1:x30; dest:x31; op1val:0xb504;  immval:0x0
TEST_IMM_OP( ori, x31, x30, 0xb504, 0xb504, 0x0, x7, 37*XLEN/8, x8)

inst_320:
// rs1_val==46340 and imm_val==1364, 
// opcode: ori ; op1:x30; dest:x31; op1val:0xb504;  immval:0x554
TEST_IMM_OP( ori, x31, x30, 0xb554, 0xb504, 0x554, x7, 38*XLEN/8, x8)

inst_321:
// rs1_val==46340 and imm_val==2, 
// opcode: ori ; op1:x30; dest:x31; op1val:0xb504;  immval:0x2
TEST_IMM_OP( ori, x31, x30, 0xb506, 0xb504, 0x2, x7, 39*XLEN/8, x8)

inst_322:
// rs1_val==46340 and imm_val==45, 
// opcode: ori ; op1:x30; dest:x31; op1val:0xb504;  immval:0x2d
TEST_IMM_OP( ori, x31, x30, 0xb52d, 0xb504, 0x2d, x7, 40*XLEN/8, x8)

inst_323:
// rs1_val==46340 and imm_val==-45, 
// opcode: ori ; op1:x30; dest:x31; op1val:0xb504;  immval:-0x2d
TEST_IMM_OP( ori, x31, x30, 0xffffffd7, 0xb504, -0x2d, x7, 41*XLEN/8, x8)

inst_324:
// rs1_val==46340 and imm_val==1638, 
// opcode: ori ; op1:x30; dest:x31; op1val:0xb504;  immval:0x666
TEST_IMM_OP( ori, x31, x30, 0xb766, 0xb504, 0x666, x7, 42*XLEN/8, x8)

inst_325:
// rs1_val==46340 and imm_val==819, 
// opcode: ori ; op1:x30; dest:x31; op1val:0xb504;  immval:0x333
TEST_IMM_OP( ori, x31, x30, 0xb737, 0xb504, 0x333, x7, 43*XLEN/8, x8)

inst_326:
// rs1_val==46340 and imm_val==5, 
// opcode: ori ; op1:x30; dest:x31; op1val:0xb504;  immval:0x5
TEST_IMM_OP( ori, x31, x30, 0xb505, 0xb504, 0x5, x7, 44*XLEN/8, x8)

inst_327:
// rs1_val==46340 and imm_val==-1366, 
// opcode: ori ; op1:x30; dest:x31; op1val:0xb504;  immval:-0x556
TEST_IMM_OP( ori, x31, x30, 0xffffffae, 0xb504, -0x556, x7, 45*XLEN/8, x8)

inst_328:
// rs1_val==46340 and imm_val==1365, 
// opcode: ori ; op1:x30; dest:x31; op1val:0xb504;  immval:0x555
TEST_IMM_OP( ori, x31, x30, 0xb555, 0xb504, 0x555, x7, 46*XLEN/8, x8)

inst_329:
// rs1_val==46340 and imm_val==3, 
// opcode: ori ; op1:x30; dest:x31; op1val:0xb504;  immval:0x3
TEST_IMM_OP( ori, x31, x30, 0xb507, 0xb504, 0x3, x7, 47*XLEN/8, x8)

inst_330:
// rs1_val==-46340 and imm_val==46, 
// opcode: ori ; op1:x30; dest:x31; op1val:-0xb504;  immval:0x2e
TEST_IMM_OP( ori, x31, x30, 0xffff4afe, -0xb504, 0x2e, x7, 48*XLEN/8, x8)

inst_331:
// rs1_val==-46340 and imm_val==-44, 
// opcode: ori ; op1:x30; dest:x31; op1val:-0xb504;  immval:-0x2c
TEST_IMM_OP( ori, x31, x30, 0xfffffffc, -0xb504, -0x2c, x7, 49*XLEN/8, x8)

inst_332:
// rs1_val==-46340 and imm_val==1639, 
// opcode: ori ; op1:x30; dest:x31; op1val:-0xb504;  immval:0x667
TEST_IMM_OP( ori, x31, x30, 0xffff4eff, -0xb504, 0x667, x7, 50*XLEN/8, x8)

inst_333:
// rs1_val==-46340 and imm_val==820, 
// opcode: ori ; op1:x30; dest:x31; op1val:-0xb504;  immval:0x334
TEST_IMM_OP( ori, x31, x30, 0xffff4bfc, -0xb504, 0x334, x7, 51*XLEN/8, x8)

inst_334:
// rs1_val==-46340 and imm_val==6, 
// opcode: ori ; op1:x30; dest:x31; op1val:-0xb504;  immval:0x6
TEST_IMM_OP( ori, x31, x30, 0xffff4afe, -0xb504, 0x6, x7, 52*XLEN/8, x8)

inst_335:
// rs1_val==-46340 and imm_val==-1365, 
// opcode: ori ; op1:x30; dest:x31; op1val:-0xb504;  immval:-0x555
TEST_IMM_OP( ori, x31, x30, 0xfffffaff, -0xb504, -0x555, x7, 53*XLEN/8, x8)

inst_336:
// rs1_val==-46340 and imm_val==1366, 
// opcode: ori ; op1:x30; dest:x31; op1val:-0xb504;  immval:0x556
TEST_IMM_OP( ori, x31, x30, 0xffff4ffe, -0xb504, 0x556, x7, 54*XLEN/8, x8)

inst_337:
// rs1_val==-46340 and imm_val==44, 
// opcode: ori ; op1:x30; dest:x31; op1val:-0xb504;  immval:0x2c
TEST_IMM_OP( ori, x31, x30, 0xffff4afc, -0xb504, 0x2c, x7, 55*XLEN/8, x8)

inst_338:
// rs1_val==-46340 and imm_val==1637, 
// opcode: ori ; op1:x30; dest:x31; op1val:-0xb504;  immval:0x665
TEST_IMM_OP( ori, x31, x30, 0xffff4efd, -0xb504, 0x665, x7, 56*XLEN/8, x8)

inst_339:
// rs1_val==-46340 and imm_val==818, 
// opcode: ori ; op1:x30; dest:x31; op1val:-0xb504;  immval:0x332
TEST_IMM_OP( ori, x31, x30, 0xffff4bfe, -0xb504, 0x332, x7, 57*XLEN/8, x8)

inst_340:
// rs1_val==-46340 and imm_val==4, 
// opcode: ori ; op1:x30; dest:x31; op1val:-0xb504;  immval:0x4
TEST_IMM_OP( ori, x31, x30, 0xffff4afc, -0xb504, 0x4, x7, 58*XLEN/8, x8)

inst_341:
// rs1_val==-46340 and imm_val==0, 
// opcode: ori ; op1:x30; dest:x31; op1val:-0xb504;  immval:0x0
TEST_IMM_OP( ori, x31, x30, 0xffff4afc, -0xb504, 0x0, x7, 59*XLEN/8, x8)

inst_342:
// rs1_val==-46340 and imm_val==1364, 
// opcode: ori ; op1:x30; dest:x31; op1val:-0xb504;  immval:0x554
TEST_IMM_OP( ori, x31, x30, 0xffff4ffc, -0xb504, 0x554, x7, 60*XLEN/8, x8)

inst_343:
// rs1_val==-46340 and imm_val==2, 
// opcode: ori ; op1:x30; dest:x31; op1val:-0xb504;  immval:0x2
TEST_IMM_OP( ori, x31, x30, 0xffff4afe, -0xb504, 0x2, x7, 61*XLEN/8, x8)

inst_344:
// rs1_val==-46340 and imm_val==45, 
// opcode: ori ; op1:x30; dest:x31; op1val:-0xb504;  immval:0x2d
TEST_IMM_OP( ori, x31, x30, 0xffff4afd, -0xb504, 0x2d, x7, 62*XLEN/8, x8)

inst_345:
// rs1_val==-46340 and imm_val==-45, 
// opcode: ori ; op1:x30; dest:x31; op1val:-0xb504;  immval:-0x2d
TEST_IMM_OP( ori, x31, x30, 0xffffffff, -0xb504, -0x2d, x7, 63*XLEN/8, x8)

inst_346:
// rs1_val==-46340 and imm_val==1638, 
// opcode: ori ; op1:x30; dest:x31; op1val:-0xb504;  immval:0x666
TEST_IMM_OP( ori, x31, x30, 0xffff4efe, -0xb504, 0x666, x7, 64*XLEN/8, x8)

inst_347:
// rs1_val==-46340 and imm_val==819, 
// opcode: ori ; op1:x30; dest:x31; op1val:-0xb504;  immval:0x333
TEST_IMM_OP( ori, x31, x30, 0xffff4bff, -0xb504, 0x333, x7, 65*XLEN/8, x8)

inst_348:
// rs1_val==-46340 and imm_val==5, 
// opcode: ori ; op1:x30; dest:x31; op1val:-0xb504;  immval:0x5
TEST_IMM_OP( ori, x31, x30, 0xffff4afd, -0xb504, 0x5, x7, 66*XLEN/8, x8)

inst_349:
// rs1_val==-46340 and imm_val==-1366, 
// opcode: ori ; op1:x30; dest:x31; op1val:-0xb504;  immval:-0x556
TEST_IMM_OP( ori, x31, x30, 0xfffffafe, -0xb504, -0x556, x7, 67*XLEN/8, x8)

inst_350:
// rs1_val==-46340 and imm_val==1365, 
// opcode: ori ; op1:x30; dest:x31; op1val:-0xb504;  immval:0x555
TEST_IMM_OP( ori, x31, x30, 0xffff4ffd, -0xb504, 0x555, x7, 68*XLEN/8, x8)

inst_351:
// rs1_val==-46340 and imm_val==3, 
// opcode: ori ; op1:x30; dest:x31; op1val:-0xb504;  immval:0x3
TEST_IMM_OP( ori, x31, x30, 0xffff4aff, -0xb504, 0x3, x7, 69*XLEN/8, x8)

inst_352:
// rs1_val==1717986918 and imm_val==46, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x66666666;  immval:0x2e
TEST_IMM_OP( ori, x31, x30, 0x6666666e, 0x66666666, 0x2e, x7, 70*XLEN/8, x8)

inst_353:
// rs1_val==1717986918 and imm_val==-44, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x66666666;  immval:-0x2c
TEST_IMM_OP( ori, x31, x30, 0xfffffff6, 0x66666666, -0x2c, x7, 71*XLEN/8, x8)

inst_354:
// rs1_val==1717986918 and imm_val==1639, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x66666666;  immval:0x667
TEST_IMM_OP( ori, x31, x30, 0x66666667, 0x66666666, 0x667, x7, 72*XLEN/8, x8)

inst_355:
// rs1_val==1717986918 and imm_val==820, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x66666666;  immval:0x334
TEST_IMM_OP( ori, x31, x30, 0x66666776, 0x66666666, 0x334, x7, 73*XLEN/8, x8)

inst_356:
// rs1_val==1717986918 and imm_val==6, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x66666666;  immval:0x6
TEST_IMM_OP( ori, x31, x30, 0x66666666, 0x66666666, 0x6, x7, 74*XLEN/8, x8)

inst_357:
// rs1_val==1717986918 and imm_val==-1365, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x66666666;  immval:-0x555
TEST_IMM_OP( ori, x31, x30, 0xfffffeef, 0x66666666, -0x555, x7, 75*XLEN/8, x8)

inst_358:
// rs1_val==1717986918 and imm_val==1366, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x66666666;  immval:0x556
TEST_IMM_OP( ori, x31, x30, 0x66666776, 0x66666666, 0x556, x7, 76*XLEN/8, x8)

inst_359:
// rs1_val==1717986918 and imm_val==44, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x66666666;  immval:0x2c
TEST_IMM_OP( ori, x31, x30, 0x6666666e, 0x66666666, 0x2c, x7, 77*XLEN/8, x8)

inst_360:
// rs1_val==1717986918 and imm_val==1637, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x66666666;  immval:0x665
TEST_IMM_OP( ori, x31, x30, 0x66666667, 0x66666666, 0x665, x7, 78*XLEN/8, x8)

inst_361:
// rs1_val==1717986918 and imm_val==818, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x66666666;  immval:0x332
TEST_IMM_OP( ori, x31, x30, 0x66666776, 0x66666666, 0x332, x7, 79*XLEN/8, x8)

inst_362:
// rs1_val==1717986918 and imm_val==4, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x66666666;  immval:0x4
TEST_IMM_OP( ori, x31, x30, 0x66666666, 0x66666666, 0x4, x7, 80*XLEN/8, x8)

inst_363:
// rs1_val==1717986918 and imm_val==0, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x66666666;  immval:0x0
TEST_IMM_OP( ori, x31, x30, 0x66666666, 0x66666666, 0x0, x7, 81*XLEN/8, x8)

inst_364:
// rs1_val==1717986918 and imm_val==1364, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x66666666;  immval:0x554
TEST_IMM_OP( ori, x31, x30, 0x66666776, 0x66666666, 0x554, x7, 82*XLEN/8, x8)

inst_365:
// rs1_val==1717986918 and imm_val==2, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x66666666;  immval:0x2
TEST_IMM_OP( ori, x31, x30, 0x66666666, 0x66666666, 0x2, x7, 83*XLEN/8, x8)

inst_366:
// rs1_val==1717986918 and imm_val==45, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x66666666;  immval:0x2d
TEST_IMM_OP( ori, x31, x30, 0x6666666f, 0x66666666, 0x2d, x7, 84*XLEN/8, x8)

inst_367:
// rs1_val==1717986918 and imm_val==-45, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x66666666;  immval:-0x2d
TEST_IMM_OP( ori, x31, x30, 0xfffffff7, 0x66666666, -0x2d, x7, 85*XLEN/8, x8)

inst_368:
// rs1_val==1717986918 and imm_val==1638, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x66666666;  immval:0x666
TEST_IMM_OP( ori, x31, x30, 0x66666666, 0x66666666, 0x666, x7, 86*XLEN/8, x8)

inst_369:
// rs1_val==1717986918 and imm_val==819, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x66666666;  immval:0x333
TEST_IMM_OP( ori, x31, x30, 0x66666777, 0x66666666, 0x333, x7, 87*XLEN/8, x8)

inst_370:
// rs1_val==1717986918 and imm_val==5, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x66666666;  immval:0x5
TEST_IMM_OP( ori, x31, x30, 0x66666667, 0x66666666, 0x5, x7, 88*XLEN/8, x8)

inst_371:
// rs1_val==1717986918 and imm_val==-1366, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x66666666;  immval:-0x556
TEST_IMM_OP( ori, x31, x30, 0xfffffeee, 0x66666666, -0x556, x7, 89*XLEN/8, x8)

inst_372:
// rs1_val==1717986918 and imm_val==1365, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x66666666;  immval:0x555
TEST_IMM_OP( ori, x31, x30, 0x66666777, 0x66666666, 0x555, x7, 90*XLEN/8, x8)

inst_373:
// rs1_val==1717986918 and imm_val==3, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x66666666;  immval:0x3
TEST_IMM_OP( ori, x31, x30, 0x66666667, 0x66666666, 0x3, x7, 91*XLEN/8, x8)

inst_374:
// rs1_val==858993459 and imm_val==46, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x33333333;  immval:0x2e
TEST_IMM_OP( ori, x31, x30, 0x3333333f, 0x33333333, 0x2e, x7, 92*XLEN/8, x8)

inst_375:
// rs1_val==858993459 and imm_val==-44, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x33333333;  immval:-0x2c
TEST_IMM_OP( ori, x31, x30, 0xfffffff7, 0x33333333, -0x2c, x7, 93*XLEN/8, x8)

inst_376:
// rs1_val==858993459 and imm_val==1639, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x33333333;  immval:0x667
TEST_IMM_OP( ori, x31, x30, 0x33333777, 0x33333333, 0x667, x7, 94*XLEN/8, x8)

inst_377:
// rs1_val==858993459 and imm_val==820, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x33333333;  immval:0x334
TEST_IMM_OP( ori, x31, x30, 0x33333337, 0x33333333, 0x334, x7, 95*XLEN/8, x8)

inst_378:
// rs1_val==858993459 and imm_val==6, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x33333333;  immval:0x6
TEST_IMM_OP( ori, x31, x30, 0x33333337, 0x33333333, 0x6, x7, 96*XLEN/8, x8)

inst_379:
// rs1_val==858993459 and imm_val==-1365, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x33333333;  immval:-0x555
TEST_IMM_OP( ori, x31, x30, 0xfffffbbb, 0x33333333, -0x555, x7, 97*XLEN/8, x8)

inst_380:
// rs1_val==858993459 and imm_val==1366, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x33333333;  immval:0x556
TEST_IMM_OP( ori, x31, x30, 0x33333777, 0x33333333, 0x556, x7, 98*XLEN/8, x8)

inst_381:
// rs1_val==858993459 and imm_val==44, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x33333333;  immval:0x2c
TEST_IMM_OP( ori, x31, x30, 0x3333333f, 0x33333333, 0x2c, x7, 99*XLEN/8, x8)

inst_382:
// rs1_val==858993459 and imm_val==1637, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x33333333;  immval:0x665
TEST_IMM_OP( ori, x31, x30, 0x33333777, 0x33333333, 0x665, x7, 100*XLEN/8, x8)

inst_383:
// rs1_val==858993459 and imm_val==818, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x33333333;  immval:0x332
TEST_IMM_OP( ori, x31, x30, 0x33333333, 0x33333333, 0x332, x7, 101*XLEN/8, x8)

inst_384:
// rs1_val==858993459 and imm_val==4, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x33333333;  immval:0x4
TEST_IMM_OP( ori, x31, x30, 0x33333337, 0x33333333, 0x4, x7, 102*XLEN/8, x8)

inst_385:
// rs1_val==858993459 and imm_val==0, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x33333333;  immval:0x0
TEST_IMM_OP( ori, x31, x30, 0x33333333, 0x33333333, 0x0, x7, 103*XLEN/8, x8)

inst_386:
// rs1_val==858993459 and imm_val==1364, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x33333333;  immval:0x554
TEST_IMM_OP( ori, x31, x30, 0x33333777, 0x33333333, 0x554, x7, 104*XLEN/8, x8)

inst_387:
// rs1_val==858993459 and imm_val==2, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x33333333;  immval:0x2
TEST_IMM_OP( ori, x31, x30, 0x33333333, 0x33333333, 0x2, x7, 105*XLEN/8, x8)

inst_388:
// rs1_val==858993459 and imm_val==45, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x33333333;  immval:0x2d
TEST_IMM_OP( ori, x31, x30, 0x3333333f, 0x33333333, 0x2d, x7, 106*XLEN/8, x8)

inst_389:
// rs1_val==858993459 and imm_val==-45, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x33333333;  immval:-0x2d
TEST_IMM_OP( ori, x31, x30, 0xfffffff3, 0x33333333, -0x2d, x7, 107*XLEN/8, x8)

inst_390:
// rs1_val==858993459 and imm_val==1638, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x33333333;  immval:0x666
TEST_IMM_OP( ori, x31, x30, 0x33333777, 0x33333333, 0x666, x7, 108*XLEN/8, x8)

inst_391:
// rs1_val==858993459 and imm_val==819, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x33333333;  immval:0x333
TEST_IMM_OP( ori, x31, x30, 0x33333333, 0x33333333, 0x333, x7, 109*XLEN/8, x8)

inst_392:
// rs1_val==858993459 and imm_val==5, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x33333333;  immval:0x5
TEST_IMM_OP( ori, x31, x30, 0x33333337, 0x33333333, 0x5, x7, 110*XLEN/8, x8)

inst_393:
// rs1_val==858993459 and imm_val==-1366, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x33333333;  immval:-0x556
TEST_IMM_OP( ori, x31, x30, 0xfffffbbb, 0x33333333, -0x556, x7, 111*XLEN/8, x8)

inst_394:
// rs1_val==858993459 and imm_val==1365, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x33333333;  immval:0x555
TEST_IMM_OP( ori, x31, x30, 0x33333777, 0x33333333, 0x555, x7, 112*XLEN/8, x8)

inst_395:
// rs1_val==858993459 and imm_val==3, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x33333333;  immval:0x3
TEST_IMM_OP( ori, x31, x30, 0x33333333, 0x33333333, 0x3, x7, 113*XLEN/8, x8)

inst_396:
// rs1_val==5 and imm_val==46, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x5;  immval:0x2e
TEST_IMM_OP( ori, x31, x30, 0x2f, 0x5, 0x2e, x7, 114*XLEN/8, x8)

inst_397:
// rs1_val==5 and imm_val==-44, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x5;  immval:-0x2c
TEST_IMM_OP( ori, x31, x30, 0xffffffd5, 0x5, -0x2c, x7, 115*XLEN/8, x8)

inst_398:
// rs1_val==5 and imm_val==1639, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x5;  immval:0x667
TEST_IMM_OP( ori, x31, x30, 0x667, 0x5, 0x667, x7, 116*XLEN/8, x8)

inst_399:
// rs1_val==5 and imm_val==820, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x5;  immval:0x334
TEST_IMM_OP( ori, x31, x30, 0x335, 0x5, 0x334, x7, 117*XLEN/8, x8)

inst_400:
// rs1_val==5 and imm_val==6, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x5;  immval:0x6
TEST_IMM_OP( ori, x31, x30, 0x7, 0x5, 0x6, x7, 118*XLEN/8, x8)

inst_401:
// rs1_val==5 and imm_val==-1365, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x5;  immval:-0x555
TEST_IMM_OP( ori, x31, x30, 0xfffffaaf, 0x5, -0x555, x7, 119*XLEN/8, x8)

inst_402:
// rs1_val==5 and imm_val==1366, 
// opcode: ori ; op1:x30; dest:x31; op1val:0x5;  immval:0x556
TEST_IMM_OP( ori, x31, x30, 0x557, 0x5, 0x556, x7, 120*XLEN/8, x8)

inst_403:
// rs1_val == 1, imm_val == (-2**(12-1))
// opcode: ori ; op1:x30; dest:x31; op1val:0x1;  immval:-0x800
TEST_IMM_OP( ori, x31, x30, 0xfffff801, 0x1, -0x800, x7, 121*XLEN/8, x8)

inst_404:
// rs1_val == (2**(xlen-1)-1), 
// opcode: ori ; op1:x30; dest:x31; op1val:0x7fffffff;  immval:-0x800
TEST_IMM_OP( ori, x31, x30, 0xffffffff, 0x7fffffff, -0x800, x7, 122*XLEN/8, x8)

inst_405:
// rs1_val == (-2**(xlen-1)), 
// opcode: ori ; op1:x30; dest:x31; op1val:-0x80000000;  immval:-0x800
TEST_IMM_OP( ori, x31, x30, 0xfffff800, -0x80000000, -0x800, x7, 123*XLEN/8, x8)

inst_406:
// imm_val == 1, 
// opcode: ori ; op1:x30; dest:x31; op1val:-0x80000000;  immval:0x1
TEST_IMM_OP( ori, x31, x30, 0x80000001, -0x80000000, 0x1, x7, 124*XLEN/8, x8)

inst_407:
// imm_val == (2**(12-1)-1), 
// opcode: ori ; op1:x30; dest:x31; op1val:-0x80000000;  immval:0x7ff
TEST_IMM_OP( ori, x31, x30, 0x800007ff, -0x80000000, 0x7ff, x7, 125*XLEN/8, x8)

inst_408:
// rs1_val==-46339 and imm_val==818, 
// opcode: ori ; op1:x30; dest:x31; op1val:-0xb503;  immval:0x332
TEST_IMM_OP( ori, x31, x30, 0xffff4bff, -0xb503, 0x332, x7, 126*XLEN/8, x8)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x1_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x1_1:
    .fill 26*((XLEN/8)/4),4,0xdeadbeef


signature_x7_0:
    .fill 256*((XLEN/8)/4),4,0xdeadbeef


signature_x7_1:
    .fill 127*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
